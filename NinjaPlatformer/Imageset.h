#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.8.3928.0.
// 
namespace NinjaPlatformer {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class ImagesetDataTable;
        public : ref class ImageDataTable;
        public : ref class ImagesetRow;
        public : ref class ImageRow;
        public : ref class ImagesetRowChangeEvent;
        public : ref class ImageRowChangeEvent;
        
        private: NinjaPlatformer::NewDataSet::ImagesetDataTable^  tableImageset;
        
        private: NinjaPlatformer::NewDataSet::ImageDataTable^  tableImage;
        
        private: ::System::Data::DataRelation^  relationImageset_Image;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ImagesetRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ImageRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::ImageRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::ImagesetDataTable^  Imageset {
            NinjaPlatformer::NewDataSet::ImagesetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::ImageDataTable^  Image {
            NinjaPlatformer::NewDataSet::ImageDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeImageset();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeImage();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ImagesetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimagefile;
            
            private: ::System::Data::DataColumn^  columnresourceGroup;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnnativeHorzRes;
            
            private: ::System::Data::DataColumn^  columnnativeVertRes;
            
            private: ::System::Data::DataColumn^  columnautoScaled;
            
            private: ::System::Data::DataColumn^  columnversion;
            
            private: ::System::Data::DataColumn^  columnImageset_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetRowChangeEventHandler^  ImagesetRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetRowChangeEventHandler^  ImagesetRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetRowChangeEventHandler^  ImagesetRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetRowChangeEventHandler^  ImagesetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  imagefileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  resourceGroupColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nativeHorzResColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nativeVertResColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  autoScaledColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  versionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Imageset_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::ImagesetRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::ImagesetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddImagesetRow(NinjaPlatformer::NewDataSet::ImagesetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::ImagesetRow^  AddImagesetRow(
                        System::String^  imagefile, 
                        System::String^  resourceGroup, 
                        System::String^  name, 
                        System::UInt64 nativeHorzRes, 
                        System::UInt64 nativeVertRes, 
                        System::String^  autoScaled, 
                        System::UInt64 version);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::ImagesetRow^  NewImagesetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveImagesetRow(NinjaPlatformer::NewDataSet::ImagesetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ImageDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnImageset_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImageRowChangeEventHandler^  ImageRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImageRowChangeEventHandler^  ImageRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImageRowChangeEventHandler^  ImageRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImageRowChangeEventHandler^  ImageRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImageDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImageDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImageDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Imageset_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::ImageRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::ImageRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddImageRow(NinjaPlatformer::NewDataSet::ImageRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::ImageRow^  AddImageRow(System::String^  name, System::String^  type, NinjaPlatformer::NewDataSet::ImagesetRow^  parentImagesetRowByImageset_Image);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::ImageRow^  NewImageRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveImageRow(NinjaPlatformer::NewDataSet::ImageRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ImagesetRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::ImagesetDataTable^  tableImageset;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  imagefile {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  resourceGroup {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 nativeHorzRes {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 nativeVertRes {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  autoScaled {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 version {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Imageset_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnativeHorzResNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnativeHorzResNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnativeVertResNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnativeVertResNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsautoScaledNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetautoScaledNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsversionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetversionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::ImageRow^  >^  GetImageRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ImageRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::ImageDataTable^  tableImage;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImageRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Imageset_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::ImagesetRow^  ImagesetRow {
                NinjaPlatformer::NewDataSet::ImagesetRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::ImagesetRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IstypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SettypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsImageset_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetImageset_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ImagesetRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::ImagesetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetRowChangeEvent(NinjaPlatformer::NewDataSet::ImagesetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::ImagesetRow^  Row {
                NinjaPlatformer::NewDataSet::ImagesetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ImageRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::ImageRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImageRowChangeEvent(NinjaPlatformer::NewDataSet::ImageRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::ImageRow^  Row {
                NinjaPlatformer::NewDataSet::ImageRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace NinjaPlatformer {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NinjaPlatformer::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NinjaPlatformer::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"Imageset"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::ImagesetDataTable(ds->Tables[L"Imageset"])));
            }
            if (ds->Tables[L"Image"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::ImageDataTable(ds->Tables[L"Image"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NinjaPlatformer::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetDataTable^  NewDataSet::Imageset::get() {
        return this->tableImageset;
    }
    
    inline NinjaPlatformer::NewDataSet::ImageDataTable^  NewDataSet::Image::get() {
        return this->tableImage;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        NinjaPlatformer::NewDataSet^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"Imageset"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::ImagesetDataTable(ds->Tables[L"Imageset"])));
            }
            if (ds->Tables[L"Image"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::ImageDataTable(ds->Tables[L"Image"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tableImageset = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetDataTable^  >(__super::Tables[L"Imageset"]));
        if (initTable == true) {
            if (this->tableImageset != nullptr) {
                this->tableImageset->InitVars();
            }
        }
        this->tableImage = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImageDataTable^  >(__super::Tables[L"Image"]));
        if (initTable == true) {
            if (this->tableImage != nullptr) {
                this->tableImage->InitVars();
            }
        }
        this->relationImageset_Image = this->Relations[L"Imageset_Image"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableImageset = (gcnew NinjaPlatformer::NewDataSet::ImagesetDataTable());
        __super::Tables->Add(this->tableImageset);
        this->tableImage = (gcnew NinjaPlatformer::NewDataSet::ImageDataTable());
        __super::Tables->Add(this->tableImage);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Imageset_Image", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableImageset->Imageset_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableImage->Imageset_IdColumn}));
        this->tableImage->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationImageset_Image = (gcnew ::System::Data::DataRelation(L"Imageset_Image", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableImageset->Imageset_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableImage->Imageset_IdColumn}, false));
        this->relationImageset_Image->Nested = true;
        this->Relations->Add(this->relationImageset_Image);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeImageset() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeImage() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ImagesetDataTable::ImagesetDataTable() {
        this->TableName = L"Imageset";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ImagesetDataTable::ImagesetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ImagesetDataTable::ImagesetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::imagefileColumn::get() {
        return this->columnimagefile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::resourceGroupColumn::get() {
        return this->columnresourceGroup;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::nativeHorzResColumn::get() {
        return this->columnnativeHorzRes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::nativeVertResColumn::get() {
        return this->columnnativeVertRes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::autoScaledColumn::get() {
        return this->columnautoScaled;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::versionColumn::get() {
        return this->columnversion;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::Imageset_IdColumn::get() {
        return this->columnImageset_Id;
    }
    
    inline ::System::Int32 NewDataSet::ImagesetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetRow^  NewDataSet::ImagesetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::AddImagesetRow(NinjaPlatformer::NewDataSet::ImagesetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetRow^  NewDataSet::ImagesetDataTable::AddImagesetRow(
                System::String^  imagefile, 
                System::String^  resourceGroup, 
                System::String^  name, 
                System::UInt64 nativeHorzRes, 
                System::UInt64 nativeVertRes, 
                System::String^  autoScaled, 
                System::UInt64 version) {
        NinjaPlatformer::NewDataSet::ImagesetRow^  rowImagesetRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(8) {imagefile, resourceGroup, 
            name, nativeHorzRes, nativeVertRes, autoScaled, version, nullptr};
        rowImagesetRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowImagesetRow);
        return rowImagesetRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ImagesetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ImagesetDataTable::Clone() {
        NinjaPlatformer::NewDataSet::ImagesetDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ImagesetDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::ImagesetDataTable());
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::InitVars() {
        this->columnimagefile = __super::Columns[L"imagefile"];
        this->columnresourceGroup = __super::Columns[L"resourceGroup"];
        this->columnname = __super::Columns[L"name"];
        this->columnnativeHorzRes = __super::Columns[L"nativeHorzRes"];
        this->columnnativeVertRes = __super::Columns[L"nativeVertRes"];
        this->columnautoScaled = __super::Columns[L"autoScaled"];
        this->columnversion = __super::Columns[L"version"];
        this->columnImageset_Id = __super::Columns[L"Imageset_Id"];
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::InitClass() {
        this->columnimagefile = (gcnew ::System::Data::DataColumn(L"imagefile", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimagefile);
        this->columnresourceGroup = (gcnew ::System::Data::DataColumn(L"resourceGroup", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnresourceGroup);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnnativeHorzRes = (gcnew ::System::Data::DataColumn(L"nativeHorzRes", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnnativeHorzRes);
        this->columnnativeVertRes = (gcnew ::System::Data::DataColumn(L"nativeVertRes", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnnativeVertRes);
        this->columnautoScaled = (gcnew ::System::Data::DataColumn(L"autoScaled", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnautoScaled);
        this->columnversion = (gcnew ::System::Data::DataColumn(L"version", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnversion);
        this->columnImageset_Id = (gcnew ::System::Data::DataColumn(L"Imageset_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnImageset_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnImageset_Id}, 
                true)));
        this->columnimagefile->AllowDBNull = false;
        this->columnimagefile->Namespace = L"";
        this->columnresourceGroup->Namespace = L"";
        this->columnresourceGroup->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnnativeHorzRes->Namespace = L"";
        this->columnnativeHorzRes->DefaultValue = static_cast<System::UInt64>(640);
        this->columnnativeVertRes->Namespace = L"";
        this->columnnativeVertRes->DefaultValue = static_cast<System::UInt64>(480);
        this->columnautoScaled->Namespace = L"";
        this->columnautoScaled->DefaultValue = (cli::safe_cast<System::String^  >(L"false"));
        this->columnversion->Namespace = L"";
        this->columnversion->DefaultValue = static_cast<System::UInt64>(0);
        this->columnImageset_Id->AutoIncrement = true;
        this->columnImageset_Id->AllowDBNull = false;
        this->columnImageset_Id->Unique = true;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetRow^  NewDataSet::ImagesetDataTable::NewImagesetRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ImagesetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::ImagesetRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ImagesetDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::ImagesetRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ImagesetRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ImagesetRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ImagesetRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ImagesetRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::RemoveImagesetRow(NinjaPlatformer::NewDataSet::ImagesetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ImagesetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ImagesetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ImageDataTable::ImageDataTable() {
        this->TableName = L"Image";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ImageDataTable::ImageDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ImageDataTable::ImageDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImageDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImageDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImageDataTable::Imageset_IdColumn::get() {
        return this->columnImageset_Id;
    }
    
    inline ::System::Int32 NewDataSet::ImageDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::ImageRow^  NewDataSet::ImageDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::ImageRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ImageDataTable::AddImageRow(NinjaPlatformer::NewDataSet::ImageRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::ImageRow^  NewDataSet::ImageDataTable::AddImageRow(System::String^  name, System::String^  type, 
                NinjaPlatformer::NewDataSet::ImagesetRow^  parentImagesetRowByImageset_Image) {
        NinjaPlatformer::NewDataSet::ImageRow^  rowImageRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImageRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, type, nullptr};
        if (parentImagesetRowByImageset_Image != nullptr) {
            columnValuesArray[2] = parentImagesetRowByImageset_Image[7];
        }
        rowImageRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowImageRow);
        return rowImageRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ImageDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ImageDataTable::Clone() {
        NinjaPlatformer::NewDataSet::ImageDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImageDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ImageDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::ImageDataTable());
    }
    
    inline ::System::Void NewDataSet::ImageDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columntype = __super::Columns[L"type"];
        this->columnImageset_Id = __super::Columns[L"Imageset_Id"];
    }
    
    inline ::System::Void NewDataSet::ImageDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntype);
        this->columnImageset_Id = (gcnew ::System::Data::DataColumn(L"Imageset_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnImageset_Id);
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columntype->Namespace = L"";
        this->columntype->DefaultValue = (cli::safe_cast<System::String^  >(L"BasicImage"));
    }
    
    inline NinjaPlatformer::NewDataSet::ImageRow^  NewDataSet::ImageDataTable::NewImageRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::ImageRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ImageDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::ImageRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ImageDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::ImageRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ImageDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ImageRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::ImageRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImageDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ImageRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::ImageRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImageDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ImageRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::ImageRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImageDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ImageRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::ImageRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImageDataTable::RemoveImageRow(NinjaPlatformer::NewDataSet::ImageRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ImageDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ImageDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ImagesetRow::ImagesetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableImageset = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ImagesetRow::imagefile::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableImageset->imagefileColumn]));
    }
    inline System::Void NewDataSet::ImagesetRow::imagefile::set(System::String^  value) {
        this[this->tableImageset->imagefileColumn] = value;
    }
    
    inline System::String^  NewDataSet::ImagesetRow::resourceGroup::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableImageset->resourceGroupColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'resourceGroup\' in table \'Imageset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetRow::resourceGroup::set(System::String^  value) {
        this[this->tableImageset->resourceGroupColumn] = value;
    }
    
    inline System::String^  NewDataSet::ImagesetRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableImageset->nameColumn]));
    }
    inline System::Void NewDataSet::ImagesetRow::name::set(System::String^  value) {
        this[this->tableImageset->nameColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::ImagesetRow::nativeHorzRes::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableImageset->nativeHorzResColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'nativeHorzRes\' in table \'Imageset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetRow::nativeHorzRes::set(System::UInt64 value) {
        this[this->tableImageset->nativeHorzResColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::ImagesetRow::nativeVertRes::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableImageset->nativeVertResColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'nativeVertRes\' in table \'Imageset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetRow::nativeVertRes::set(System::UInt64 value) {
        this[this->tableImageset->nativeVertResColumn] = value;
    }
    
    inline System::String^  NewDataSet::ImagesetRow::autoScaled::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableImageset->autoScaledColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'autoScaled\' in table \'Imageset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetRow::autoScaled::set(System::String^  value) {
        this[this->tableImageset->autoScaledColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::ImagesetRow::version::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableImageset->versionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'version\' in table \'Imageset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetRow::version::set(System::UInt64 value) {
        this[this->tableImageset->versionColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ImagesetRow::Imageset_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableImageset->Imageset_IdColumn]));
    }
    inline System::Void NewDataSet::ImagesetRow::Imageset_Id::set(System::Int32 value) {
        this[this->tableImageset->Imageset_IdColumn] = value;
    }
    
    inline ::System::Boolean NewDataSet::ImagesetRow::IsresourceGroupNull() {
        return this->IsNull(this->tableImageset->resourceGroupColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetRow::SetresourceGroupNull() {
        this[this->tableImageset->resourceGroupColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ImagesetRow::IsnativeHorzResNull() {
        return this->IsNull(this->tableImageset->nativeHorzResColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetRow::SetnativeHorzResNull() {
        this[this->tableImageset->nativeHorzResColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ImagesetRow::IsnativeVertResNull() {
        return this->IsNull(this->tableImageset->nativeVertResColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetRow::SetnativeVertResNull() {
        this[this->tableImageset->nativeVertResColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ImagesetRow::IsautoScaledNull() {
        return this->IsNull(this->tableImageset->autoScaledColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetRow::SetautoScaledNull() {
        this[this->tableImageset->autoScaledColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ImagesetRow::IsversionNull() {
        return this->IsNull(this->tableImageset->versionColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetRow::SetversionNull() {
        this[this->tableImageset->versionColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::ImageRow^  >^  NewDataSet::ImagesetRow::GetImageRows() {
        if (this->Table->ChildRelations[L"Imageset_Image"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::ImageRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::ImageRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Imageset_Image"])));
        }
    }
    
    
    inline NewDataSet::ImageRow::ImageRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableImage = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImageDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ImageRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableImage->nameColumn]));
    }
    inline System::Void NewDataSet::ImageRow::name::set(System::String^  value) {
        this[this->tableImage->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::ImageRow::type::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableImage->typeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'type\' in table \'Image\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ImageRow::type::set(System::String^  value) {
        this[this->tableImage->typeColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ImageRow::Imageset_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableImage->Imageset_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Imageset_Id\' in table \'Image\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImageRow::Imageset_Id::set(System::Int32 value) {
        this[this->tableImage->Imageset_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetRow^  NewDataSet::ImageRow::ImagesetRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Imageset_Image"])));
    }
    inline System::Void NewDataSet::ImageRow::ImagesetRow::set(NinjaPlatformer::NewDataSet::ImagesetRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Imageset_Image"]);
    }
    
    inline ::System::Boolean NewDataSet::ImageRow::IstypeNull() {
        return this->IsNull(this->tableImage->typeColumn);
    }
    
    inline ::System::Void NewDataSet::ImageRow::SettypeNull() {
        this[this->tableImage->typeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ImageRow::IsImageset_IdNull() {
        return this->IsNull(this->tableImage->Imageset_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ImageRow::SetImageset_IdNull() {
        this[this->tableImage->Imageset_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::ImagesetRowChangeEvent::ImagesetRowChangeEvent(NinjaPlatformer::NewDataSet::ImagesetRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetRow^  NewDataSet::ImagesetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ImagesetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ImageRowChangeEvent::ImageRowChangeEvent(NinjaPlatformer::NewDataSet::ImageRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::ImageRow^  NewDataSet::ImageRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ImageRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
