#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.8.3928.0.
// 
namespace NinjaPlatformer {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class GUISchemeDataTable;
        public : ref class ImagesetDataTable;
        public : ref class ImagesetFromImageDataTable;
        public : ref class FontDataTable;
        public : ref class LookNFeelDataTable;
        public : ref class WindowSetDataTable;
        public : ref class WindowFactoryDataTable;
        public : ref class WindowRendererSetDataTable;
        public : ref class WindowRendererFactoryDataTable;
        public : ref class WindowAliasDataTable;
        public : ref class FalagardMappingDataTable;
        public : ref class GUISchemeRow;
        public : ref class ImagesetRow;
        public : ref class ImagesetFromImageRow;
        public : ref class FontRow;
        public : ref class LookNFeelRow;
        public : ref class WindowSetRow;
        public : ref class WindowFactoryRow;
        public : ref class WindowRendererSetRow;
        public : ref class WindowRendererFactoryRow;
        public : ref class WindowAliasRow;
        public : ref class FalagardMappingRow;
        public : ref class GUISchemeRowChangeEvent;
        public : ref class ImagesetRowChangeEvent;
        public : ref class ImagesetFromImageRowChangeEvent;
        public : ref class FontRowChangeEvent;
        public : ref class LookNFeelRowChangeEvent;
        public : ref class WindowSetRowChangeEvent;
        public : ref class WindowFactoryRowChangeEvent;
        public : ref class WindowRendererSetRowChangeEvent;
        public : ref class WindowRendererFactoryRowChangeEvent;
        public : ref class WindowAliasRowChangeEvent;
        public : ref class FalagardMappingRowChangeEvent;
        
        private: NinjaPlatformer::NewDataSet::GUISchemeDataTable^  tableGUIScheme;
        
        private: NinjaPlatformer::NewDataSet::ImagesetDataTable^  tableImageset;
        
        private: NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable^  tableImagesetFromImage;
        
        private: NinjaPlatformer::NewDataSet::FontDataTable^  tableFont;
        
        private: NinjaPlatformer::NewDataSet::LookNFeelDataTable^  tableLookNFeel;
        
        private: NinjaPlatformer::NewDataSet::WindowSetDataTable^  tableWindowSet;
        
        private: NinjaPlatformer::NewDataSet::WindowFactoryDataTable^  tableWindowFactory;
        
        private: NinjaPlatformer::NewDataSet::WindowRendererSetDataTable^  tableWindowRendererSet;
        
        private: NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable^  tableWindowRendererFactory;
        
        private: NinjaPlatformer::NewDataSet::WindowAliasDataTable^  tableWindowAlias;
        
        private: NinjaPlatformer::NewDataSet::FalagardMappingDataTable^  tableFalagardMapping;
        
        private: ::System::Data::DataRelation^  relationGUIScheme_Imageset;
        
        private: ::System::Data::DataRelation^  relationGUIScheme_ImagesetFromImage;
        
        private: ::System::Data::DataRelation^  relationGUIScheme_Font;
        
        private: ::System::Data::DataRelation^  relationGUIScheme_LookNFeel;
        
        private: ::System::Data::DataRelation^  relationGUIScheme_WindowSet;
        
        private: ::System::Data::DataRelation^  relationWindowSet_WindowFactory;
        
        private: ::System::Data::DataRelation^  relationGUIScheme_WindowRendererSet;
        
        private: ::System::Data::DataRelation^  relationWindowRendererSet_WindowRendererFactory;
        
        private: ::System::Data::DataRelation^  relationGUIScheme_WindowAlias;
        
        private: ::System::Data::DataRelation^  relationGUIScheme_FalagardMapping;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void GUISchemeRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::GUISchemeRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ImagesetRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ImagesetFromImageRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::ImagesetFromImageRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void FontRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::FontRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void LookNFeelRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::LookNFeelRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void WindowSetRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::WindowSetRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void WindowFactoryRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::WindowFactoryRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void WindowRendererSetRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::WindowRendererSetRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void WindowRendererFactoryRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::WindowRendererFactoryRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void WindowAliasRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::WindowAliasRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void FalagardMappingRowChangeEventHandler(::System::Object^  sender, NinjaPlatformer::NewDataSet::FalagardMappingRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::GUISchemeDataTable^  GUIScheme {
            NinjaPlatformer::NewDataSet::GUISchemeDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::ImagesetDataTable^  Imageset {
            NinjaPlatformer::NewDataSet::ImagesetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable^  ImagesetFromImage {
            NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::FontDataTable^  Font {
            NinjaPlatformer::NewDataSet::FontDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::LookNFeelDataTable^  LookNFeel {
            NinjaPlatformer::NewDataSet::LookNFeelDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::WindowSetDataTable^  WindowSet {
            NinjaPlatformer::NewDataSet::WindowSetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::WindowFactoryDataTable^  WindowFactory {
            NinjaPlatformer::NewDataSet::WindowFactoryDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::WindowRendererSetDataTable^  WindowRendererSet {
            NinjaPlatformer::NewDataSet::WindowRendererSetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable^  WindowRendererFactory {
            NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::WindowAliasDataTable^  WindowAlias {
            NinjaPlatformer::NewDataSet::WindowAliasDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property NinjaPlatformer::NewDataSet::FalagardMappingDataTable^  FalagardMapping {
            NinjaPlatformer::NewDataSet::FalagardMappingDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeGUIScheme();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeImageset();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeImagesetFromImage();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeFont();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeLookNFeel();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeWindowSet();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeWindowFactory();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeWindowRendererSet();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeWindowRendererFactory();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeWindowAlias();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeFalagardMapping();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class GUISchemeDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnversion;
            
            private: ::System::Data::DataColumn^  columnGUIScheme_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::GUISchemeRowChangeEventHandler^  GUISchemeRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::GUISchemeRowChangeEventHandler^  GUISchemeRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::GUISchemeRowChangeEventHandler^  GUISchemeRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::GUISchemeRowChangeEventHandler^  GUISchemeRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GUISchemeDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GUISchemeDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GUISchemeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  versionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GUIScheme_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddGUISchemeRow(NinjaPlatformer::NewDataSet::GUISchemeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::GUISchemeRow^  AddGUISchemeRow(System::String^  name, System::UInt64 version);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::GUISchemeRow^  NewGUISchemeRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveGUISchemeRow(NinjaPlatformer::NewDataSet::GUISchemeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ImagesetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnfilename;
            
            private: ::System::Data::DataColumn^  columnresourceGroup;
            
            private: ::System::Data::DataColumn^  columnGUIScheme_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetRowChangeEventHandler^  ImagesetRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetRowChangeEventHandler^  ImagesetRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetRowChangeEventHandler^  ImagesetRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetRowChangeEventHandler^  ImagesetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  filenameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  resourceGroupColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GUIScheme_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::ImagesetRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::ImagesetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddImagesetRow(NinjaPlatformer::NewDataSet::ImagesetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::ImagesetRow^  AddImagesetRow(System::String^  name, System::String^  filename, System::String^  resourceGroup, 
                        NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_Imageset);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::ImagesetRow^  NewImagesetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveImagesetRow(NinjaPlatformer::NewDataSet::ImagesetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ImagesetFromImageDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnfilename;
            
            private: ::System::Data::DataColumn^  columnresourceGroup;
            
            private: ::System::Data::DataColumn^  columnGUIScheme_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetFromImageRowChangeEventHandler^  ImagesetFromImageRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetFromImageRowChangeEventHandler^  ImagesetFromImageRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetFromImageRowChangeEventHandler^  ImagesetFromImageRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::ImagesetFromImageRowChangeEventHandler^  ImagesetFromImageRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetFromImageDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetFromImageDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetFromImageDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  filenameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  resourceGroupColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GUIScheme_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddImagesetFromImageRow(NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  AddImagesetFromImageRow(System::String^  name, System::String^  filename, 
                        System::String^  resourceGroup, NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_ImagesetFromImage);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  NewImagesetFromImageRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveImagesetFromImageRow(NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class FontDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnfilename;
            
            private: ::System::Data::DataColumn^  columnresourceGroup;
            
            private: ::System::Data::DataColumn^  columnGUIScheme_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::FontRowChangeEventHandler^  FontRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::FontRowChangeEventHandler^  FontRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::FontRowChangeEventHandler^  FontRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::FontRowChangeEventHandler^  FontRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FontDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FontDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FontDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  filenameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  resourceGroupColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GUIScheme_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::FontRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::FontRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddFontRow(NinjaPlatformer::NewDataSet::FontRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::FontRow^  AddFontRow(System::String^  name, System::String^  filename, System::String^  resourceGroup, 
                        NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_Font);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::FontRow^  NewFontRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveFontRow(NinjaPlatformer::NewDataSet::FontRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class LookNFeelDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnfilename;
            
            private: ::System::Data::DataColumn^  columnresourceGroup;
            
            private: ::System::Data::DataColumn^  columnGUIScheme_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::LookNFeelRowChangeEventHandler^  LookNFeelRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::LookNFeelRowChangeEventHandler^  LookNFeelRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::LookNFeelRowChangeEventHandler^  LookNFeelRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::LookNFeelRowChangeEventHandler^  LookNFeelRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            LookNFeelDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            LookNFeelDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            LookNFeelDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  filenameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  resourceGroupColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GUIScheme_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::LookNFeelRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::LookNFeelRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddLookNFeelRow(NinjaPlatformer::NewDataSet::LookNFeelRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::LookNFeelRow^  AddLookNFeelRow(System::String^  filename, System::String^  resourceGroup, 
                        NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_LookNFeel);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::LookNFeelRow^  NewLookNFeelRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveLookNFeelRow(NinjaPlatformer::NewDataSet::LookNFeelRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class WindowSetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnfilename;
            
            private: ::System::Data::DataColumn^  columnWindowSet_Id;
            
            private: ::System::Data::DataColumn^  columnGUIScheme_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowSetRowChangeEventHandler^  WindowSetRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowSetRowChangeEventHandler^  WindowSetRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowSetRowChangeEventHandler^  WindowSetRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowSetRowChangeEventHandler^  WindowSetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowSetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowSetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowSetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  filenameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WindowSet_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GUIScheme_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowSetRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::WindowSetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddWindowSetRow(NinjaPlatformer::NewDataSet::WindowSetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowSetRow^  AddWindowSetRow(System::String^  filename, NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_WindowSet);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowSetRow^  NewWindowSetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveWindowSetRow(NinjaPlatformer::NewDataSet::WindowSetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class WindowFactoryDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnWindowSet_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowFactoryRowChangeEventHandler^  WindowFactoryRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowFactoryRowChangeEventHandler^  WindowFactoryRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowFactoryRowChangeEventHandler^  WindowFactoryRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowFactoryRowChangeEventHandler^  WindowFactoryRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowFactoryDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowFactoryDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowFactoryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WindowSet_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowFactoryRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::WindowFactoryRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddWindowFactoryRow(NinjaPlatformer::NewDataSet::WindowFactoryRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowFactoryRow^  AddWindowFactoryRow(System::String^  name, NinjaPlatformer::NewDataSet::WindowSetRow^  parentWindowSetRowByWindowSet_WindowFactory);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowFactoryRow^  NewWindowFactoryRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveWindowFactoryRow(NinjaPlatformer::NewDataSet::WindowFactoryRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class WindowRendererSetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnfilename;
            
            private: ::System::Data::DataColumn^  columnWindowRendererSet_Id;
            
            private: ::System::Data::DataColumn^  columnGUIScheme_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowRendererSetRowChangeEventHandler^  WindowRendererSetRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowRendererSetRowChangeEventHandler^  WindowRendererSetRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowRendererSetRowChangeEventHandler^  WindowRendererSetRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowRendererSetRowChangeEventHandler^  WindowRendererSetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererSetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererSetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererSetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  filenameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WindowRendererSet_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GUIScheme_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowRendererSetRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::WindowRendererSetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddWindowRendererSetRow(NinjaPlatformer::NewDataSet::WindowRendererSetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowRendererSetRow^  AddWindowRendererSetRow(System::String^  filename, NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_WindowRendererSet);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowRendererSetRow^  NewWindowRendererSetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveWindowRendererSetRow(NinjaPlatformer::NewDataSet::WindowRendererSetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class WindowRendererFactoryDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnWindowRendererSet_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowRendererFactoryRowChangeEventHandler^  WindowRendererFactoryRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowRendererFactoryRowChangeEventHandler^  WindowRendererFactoryRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowRendererFactoryRowChangeEventHandler^  WindowRendererFactoryRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowRendererFactoryRowChangeEventHandler^  WindowRendererFactoryRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererFactoryDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererFactoryDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererFactoryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WindowRendererSet_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddWindowRendererFactoryRow(NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  AddWindowRendererFactoryRow(System::String^  name, NinjaPlatformer::NewDataSet::WindowRendererSetRow^  parentWindowRendererSetRowByWindowRendererSet_WindowRendererFactory);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  NewWindowRendererFactoryRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveWindowRendererFactoryRow(NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class WindowAliasDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnalias;
            
            private: ::System::Data::DataColumn^  columntarget;
            
            private: ::System::Data::DataColumn^  columnGUIScheme_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowAliasRowChangeEventHandler^  WindowAliasRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowAliasRowChangeEventHandler^  WindowAliasRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowAliasRowChangeEventHandler^  WindowAliasRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::WindowAliasRowChangeEventHandler^  WindowAliasRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowAliasDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowAliasDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowAliasDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  aliasColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  targetColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GUIScheme_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowAliasRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::WindowAliasRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddWindowAliasRow(NinjaPlatformer::NewDataSet::WindowAliasRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowAliasRow^  AddWindowAliasRow(System::String^  alias, System::String^  target, 
                        NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_WindowAlias);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::WindowAliasRow^  NewWindowAliasRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveWindowAliasRow(NinjaPlatformer::NewDataSet::WindowAliasRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class FalagardMappingDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnwindowType;
            
            private: ::System::Data::DataColumn^  columntargetType;
            
            private: ::System::Data::DataColumn^  columnrenderer;
            
            private: ::System::Data::DataColumn^  columnlookNFeel;
            
            private: ::System::Data::DataColumn^  columnrenderEffect;
            
            private: ::System::Data::DataColumn^  columnGUIScheme_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::FalagardMappingRowChangeEventHandler^  FalagardMappingRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::FalagardMappingRowChangeEventHandler^  FalagardMappingRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::FalagardMappingRowChangeEventHandler^  FalagardMappingRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event NinjaPlatformer::NewDataSet::FalagardMappingRowChangeEventHandler^  FalagardMappingRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FalagardMappingDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FalagardMappingDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FalagardMappingDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  windowTypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  targetTypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  rendererColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  lookNFeelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  renderEffectColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GUIScheme_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::FalagardMappingRow^  default [::System::Int32 ] {
                NinjaPlatformer::NewDataSet::FalagardMappingRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddFalagardMappingRow(NinjaPlatformer::NewDataSet::FalagardMappingRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::FalagardMappingRow^  AddFalagardMappingRow(
                        System::String^  windowType, 
                        System::String^  targetType, 
                        System::String^  renderer, 
                        System::String^  lookNFeel, 
                        System::String^  renderEffect, 
                        NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_FalagardMapping);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NinjaPlatformer::NewDataSet::FalagardMappingRow^  NewFalagardMappingRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveFalagardMappingRow(NinjaPlatformer::NewDataSet::FalagardMappingRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class GUISchemeRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::GUISchemeDataTable^  tableGUIScheme;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GUISchemeRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 version {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 GUIScheme_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsversionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetversionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::ImagesetRow^  >^  GetImagesetRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >^  GetImagesetFromImageRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::FontRow^  >^  GetFontRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::LookNFeelRow^  >^  GetLookNFeelRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::WindowSetRow^  >^  GetWindowSetRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >^  GetWindowRendererSetRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::WindowAliasRow^  >^  GetWindowAliasRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::FalagardMappingRow^  >^  GetFalagardMappingRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ImagesetRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::ImagesetDataTable^  tableImageset;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  filename {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  resourceGroup {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 GUIScheme_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  GUISchemeRow {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGUIScheme_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ImagesetFromImageRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable^  tableImagesetFromImage;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetFromImageRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  filename {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  resourceGroup {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 GUIScheme_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  GUISchemeRow {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGUIScheme_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class FontRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::FontDataTable^  tableFont;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FontRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  filename {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  resourceGroup {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 GUIScheme_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  GUISchemeRow {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGUIScheme_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class LookNFeelRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::LookNFeelDataTable^  tableLookNFeel;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            LookNFeelRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  filename {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  resourceGroup {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 GUIScheme_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  GUISchemeRow {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetresourceGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGUIScheme_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class WindowSetRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::WindowSetDataTable^  tableWindowSet;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowSetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  filename {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 WindowSet_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 GUIScheme_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  GUISchemeRow {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::WindowFactoryRow^  >^  GetWindowFactoryRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class WindowFactoryRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::WindowFactoryDataTable^  tableWindowFactory;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowFactoryRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 WindowSet_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowSetRow^  WindowSetRow {
                NinjaPlatformer::NewDataSet::WindowSetRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::WindowSetRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsWindowSet_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetWindowSet_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class WindowRendererSetRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::WindowRendererSetDataTable^  tableWindowRendererSet;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererSetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  filename {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 WindowRendererSet_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 GUIScheme_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  GUISchemeRow {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >^  GetWindowRendererFactoryRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class WindowRendererFactoryRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable^  tableWindowRendererFactory;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererFactoryRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 WindowRendererSet_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowRendererSetRow^  WindowRendererSetRow {
                NinjaPlatformer::NewDataSet::WindowRendererSetRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::WindowRendererSetRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsWindowRendererSet_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetWindowRendererSet_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class WindowAliasRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::WindowAliasDataTable^  tableWindowAlias;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowAliasRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  alias {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  target {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 GUIScheme_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  GUISchemeRow {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGUIScheme_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class FalagardMappingRow : public ::System::Data::DataRow {
            
            private: NinjaPlatformer::NewDataSet::FalagardMappingDataTable^  tableFalagardMapping;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FalagardMappingRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  windowType {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  targetType {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  renderer {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  lookNFeel {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  renderEffect {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 GUIScheme_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  GUISchemeRow {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get();
                System::Void set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsrenderEffectNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetrenderEffectNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGUIScheme_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGUIScheme_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class GUISchemeRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::GUISchemeRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GUISchemeRowChangeEvent(NinjaPlatformer::NewDataSet::GUISchemeRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::GUISchemeRow^  Row {
                NinjaPlatformer::NewDataSet::GUISchemeRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ImagesetRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::ImagesetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetRowChangeEvent(NinjaPlatformer::NewDataSet::ImagesetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::ImagesetRow^  Row {
                NinjaPlatformer::NewDataSet::ImagesetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ImagesetFromImageRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ImagesetFromImageRowChangeEvent(NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  Row {
                NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class FontRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::FontRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FontRowChangeEvent(NinjaPlatformer::NewDataSet::FontRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::FontRow^  Row {
                NinjaPlatformer::NewDataSet::FontRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class LookNFeelRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::LookNFeelRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            LookNFeelRowChangeEvent(NinjaPlatformer::NewDataSet::LookNFeelRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::LookNFeelRow^  Row {
                NinjaPlatformer::NewDataSet::LookNFeelRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class WindowSetRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::WindowSetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowSetRowChangeEvent(NinjaPlatformer::NewDataSet::WindowSetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowSetRow^  Row {
                NinjaPlatformer::NewDataSet::WindowSetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class WindowFactoryRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::WindowFactoryRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowFactoryRowChangeEvent(NinjaPlatformer::NewDataSet::WindowFactoryRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowFactoryRow^  Row {
                NinjaPlatformer::NewDataSet::WindowFactoryRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class WindowRendererSetRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::WindowRendererSetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererSetRowChangeEvent(NinjaPlatformer::NewDataSet::WindowRendererSetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowRendererSetRow^  Row {
                NinjaPlatformer::NewDataSet::WindowRendererSetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class WindowRendererFactoryRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowRendererFactoryRowChangeEvent(NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  Row {
                NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class WindowAliasRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::WindowAliasRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WindowAliasRowChangeEvent(NinjaPlatformer::NewDataSet::WindowAliasRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::WindowAliasRow^  Row {
                NinjaPlatformer::NewDataSet::WindowAliasRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class FalagardMappingRowChangeEvent : public ::System::EventArgs {
            
            private: NinjaPlatformer::NewDataSet::FalagardMappingRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FalagardMappingRowChangeEvent(NinjaPlatformer::NewDataSet::FalagardMappingRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property NinjaPlatformer::NewDataSet::FalagardMappingRow^  Row {
                NinjaPlatformer::NewDataSet::FalagardMappingRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace NinjaPlatformer {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NinjaPlatformer::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NinjaPlatformer::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"GUIScheme"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::GUISchemeDataTable(ds->Tables[L"GUIScheme"])));
            }
            if (ds->Tables[L"Imageset"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::ImagesetDataTable(ds->Tables[L"Imageset"])));
            }
            if (ds->Tables[L"ImagesetFromImage"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable(ds->Tables[L"ImagesetFromImage"])));
            }
            if (ds->Tables[L"Font"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::FontDataTable(ds->Tables[L"Font"])));
            }
            if (ds->Tables[L"LookNFeel"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::LookNFeelDataTable(ds->Tables[L"LookNFeel"])));
            }
            if (ds->Tables[L"WindowSet"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowSetDataTable(ds->Tables[L"WindowSet"])));
            }
            if (ds->Tables[L"WindowFactory"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowFactoryDataTable(ds->Tables[L"WindowFactory"])));
            }
            if (ds->Tables[L"WindowRendererSet"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowRendererSetDataTable(ds->Tables[L"WindowRendererSet"])));
            }
            if (ds->Tables[L"WindowRendererFactory"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable(ds->Tables[L"WindowRendererFactory"])));
            }
            if (ds->Tables[L"WindowAlias"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowAliasDataTable(ds->Tables[L"WindowAlias"])));
            }
            if (ds->Tables[L"FalagardMapping"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::FalagardMappingDataTable(ds->Tables[L"FalagardMapping"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NinjaPlatformer::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeDataTable^  NewDataSet::GUIScheme::get() {
        return this->tableGUIScheme;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetDataTable^  NewDataSet::Imageset::get() {
        return this->tableImageset;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable^  NewDataSet::ImagesetFromImage::get() {
        return this->tableImagesetFromImage;
    }
    
    inline NinjaPlatformer::NewDataSet::FontDataTable^  NewDataSet::Font::get() {
        return this->tableFont;
    }
    
    inline NinjaPlatformer::NewDataSet::LookNFeelDataTable^  NewDataSet::LookNFeel::get() {
        return this->tableLookNFeel;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowSetDataTable^  NewDataSet::WindowSet::get() {
        return this->tableWindowSet;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowFactoryDataTable^  NewDataSet::WindowFactory::get() {
        return this->tableWindowFactory;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererSetDataTable^  NewDataSet::WindowRendererSet::get() {
        return this->tableWindowRendererSet;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable^  NewDataSet::WindowRendererFactory::get() {
        return this->tableWindowRendererFactory;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowAliasDataTable^  NewDataSet::WindowAlias::get() {
        return this->tableWindowAlias;
    }
    
    inline NinjaPlatformer::NewDataSet::FalagardMappingDataTable^  NewDataSet::FalagardMapping::get() {
        return this->tableFalagardMapping;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        NinjaPlatformer::NewDataSet^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"GUIScheme"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::GUISchemeDataTable(ds->Tables[L"GUIScheme"])));
            }
            if (ds->Tables[L"Imageset"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::ImagesetDataTable(ds->Tables[L"Imageset"])));
            }
            if (ds->Tables[L"ImagesetFromImage"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable(ds->Tables[L"ImagesetFromImage"])));
            }
            if (ds->Tables[L"Font"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::FontDataTable(ds->Tables[L"Font"])));
            }
            if (ds->Tables[L"LookNFeel"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::LookNFeelDataTable(ds->Tables[L"LookNFeel"])));
            }
            if (ds->Tables[L"WindowSet"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowSetDataTable(ds->Tables[L"WindowSet"])));
            }
            if (ds->Tables[L"WindowFactory"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowFactoryDataTable(ds->Tables[L"WindowFactory"])));
            }
            if (ds->Tables[L"WindowRendererSet"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowRendererSetDataTable(ds->Tables[L"WindowRendererSet"])));
            }
            if (ds->Tables[L"WindowRendererFactory"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable(ds->Tables[L"WindowRendererFactory"])));
            }
            if (ds->Tables[L"WindowAlias"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::WindowAliasDataTable(ds->Tables[L"WindowAlias"])));
            }
            if (ds->Tables[L"FalagardMapping"] != nullptr) {
                __super::Tables->Add((gcnew NinjaPlatformer::NewDataSet::FalagardMappingDataTable(ds->Tables[L"FalagardMapping"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tableGUIScheme = (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeDataTable^  >(__super::Tables[L"GUIScheme"]));
        if (initTable == true) {
            if (this->tableGUIScheme != nullptr) {
                this->tableGUIScheme->InitVars();
            }
        }
        this->tableImageset = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetDataTable^  >(__super::Tables[L"Imageset"]));
        if (initTable == true) {
            if (this->tableImageset != nullptr) {
                this->tableImageset->InitVars();
            }
        }
        this->tableImagesetFromImage = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable^  >(__super::Tables[L"ImagesetFromImage"]));
        if (initTable == true) {
            if (this->tableImagesetFromImage != nullptr) {
                this->tableImagesetFromImage->InitVars();
            }
        }
        this->tableFont = (cli::safe_cast<NinjaPlatformer::NewDataSet::FontDataTable^  >(__super::Tables[L"Font"]));
        if (initTable == true) {
            if (this->tableFont != nullptr) {
                this->tableFont->InitVars();
            }
        }
        this->tableLookNFeel = (cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelDataTable^  >(__super::Tables[L"LookNFeel"]));
        if (initTable == true) {
            if (this->tableLookNFeel != nullptr) {
                this->tableLookNFeel->InitVars();
            }
        }
        this->tableWindowSet = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetDataTable^  >(__super::Tables[L"WindowSet"]));
        if (initTable == true) {
            if (this->tableWindowSet != nullptr) {
                this->tableWindowSet->InitVars();
            }
        }
        this->tableWindowFactory = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryDataTable^  >(__super::Tables[L"WindowFactory"]));
        if (initTable == true) {
            if (this->tableWindowFactory != nullptr) {
                this->tableWindowFactory->InitVars();
            }
        }
        this->tableWindowRendererSet = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetDataTable^  >(__super::Tables[L"WindowRendererSet"]));
        if (initTable == true) {
            if (this->tableWindowRendererSet != nullptr) {
                this->tableWindowRendererSet->InitVars();
            }
        }
        this->tableWindowRendererFactory = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable^  >(__super::Tables[L"WindowRendererFactory"]));
        if (initTable == true) {
            if (this->tableWindowRendererFactory != nullptr) {
                this->tableWindowRendererFactory->InitVars();
            }
        }
        this->tableWindowAlias = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasDataTable^  >(__super::Tables[L"WindowAlias"]));
        if (initTable == true) {
            if (this->tableWindowAlias != nullptr) {
                this->tableWindowAlias->InitVars();
            }
        }
        this->tableFalagardMapping = (cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingDataTable^  >(__super::Tables[L"FalagardMapping"]));
        if (initTable == true) {
            if (this->tableFalagardMapping != nullptr) {
                this->tableFalagardMapping->InitVars();
            }
        }
        this->relationGUIScheme_Imageset = this->Relations[L"GUIScheme_Imageset"];
        this->relationGUIScheme_ImagesetFromImage = this->Relations[L"GUIScheme_ImagesetFromImage"];
        this->relationGUIScheme_Font = this->Relations[L"GUIScheme_Font"];
        this->relationGUIScheme_LookNFeel = this->Relations[L"GUIScheme_LookNFeel"];
        this->relationGUIScheme_WindowSet = this->Relations[L"GUIScheme_WindowSet"];
        this->relationWindowSet_WindowFactory = this->Relations[L"WindowSet_WindowFactory"];
        this->relationGUIScheme_WindowRendererSet = this->Relations[L"GUIScheme_WindowRendererSet"];
        this->relationWindowRendererSet_WindowRendererFactory = this->Relations[L"WindowRendererSet_WindowRendererFactory"];
        this->relationGUIScheme_WindowAlias = this->Relations[L"GUIScheme_WindowAlias"];
        this->relationGUIScheme_FalagardMapping = this->Relations[L"GUIScheme_FalagardMapping"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableGUIScheme = (gcnew NinjaPlatformer::NewDataSet::GUISchemeDataTable());
        __super::Tables->Add(this->tableGUIScheme);
        this->tableImageset = (gcnew NinjaPlatformer::NewDataSet::ImagesetDataTable());
        __super::Tables->Add(this->tableImageset);
        this->tableImagesetFromImage = (gcnew NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable());
        __super::Tables->Add(this->tableImagesetFromImage);
        this->tableFont = (gcnew NinjaPlatformer::NewDataSet::FontDataTable());
        __super::Tables->Add(this->tableFont);
        this->tableLookNFeel = (gcnew NinjaPlatformer::NewDataSet::LookNFeelDataTable());
        __super::Tables->Add(this->tableLookNFeel);
        this->tableWindowSet = (gcnew NinjaPlatformer::NewDataSet::WindowSetDataTable());
        __super::Tables->Add(this->tableWindowSet);
        this->tableWindowFactory = (gcnew NinjaPlatformer::NewDataSet::WindowFactoryDataTable());
        __super::Tables->Add(this->tableWindowFactory);
        this->tableWindowRendererSet = (gcnew NinjaPlatformer::NewDataSet::WindowRendererSetDataTable());
        __super::Tables->Add(this->tableWindowRendererSet);
        this->tableWindowRendererFactory = (gcnew NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable());
        __super::Tables->Add(this->tableWindowRendererFactory);
        this->tableWindowAlias = (gcnew NinjaPlatformer::NewDataSet::WindowAliasDataTable());
        __super::Tables->Add(this->tableWindowAlias);
        this->tableFalagardMapping = (gcnew NinjaPlatformer::NewDataSet::FalagardMappingDataTable());
        __super::Tables->Add(this->tableFalagardMapping);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"GUIScheme_Imageset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableImageset->GUIScheme_IdColumn}));
        this->tableImageset->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"GUIScheme_ImagesetFromImage", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableImagesetFromImage->GUIScheme_IdColumn}));
        this->tableImagesetFromImage->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"GUIScheme_Font", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableFont->GUIScheme_IdColumn}));
        this->tableFont->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"GUIScheme_LookNFeel", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLookNFeel->GUIScheme_IdColumn}));
        this->tableLookNFeel->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"GUIScheme_WindowSet", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowSet->GUIScheme_IdColumn}));
        this->tableWindowSet->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WindowSet_WindowFactory", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowSet->WindowSet_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowFactory->WindowSet_IdColumn}));
        this->tableWindowFactory->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"GUIScheme_WindowRendererSet", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowRendererSet->GUIScheme_IdColumn}));
        this->tableWindowRendererSet->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WindowRendererSet_WindowRendererFactory", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowRendererSet->WindowRendererSet_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowRendererFactory->WindowRendererSet_IdColumn}));
        this->tableWindowRendererFactory->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"GUIScheme_WindowAlias", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowAlias->GUIScheme_IdColumn}));
        this->tableWindowAlias->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"GUIScheme_FalagardMapping", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableFalagardMapping->GUIScheme_IdColumn}));
        this->tableFalagardMapping->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationGUIScheme_Imageset = (gcnew ::System::Data::DataRelation(L"GUIScheme_Imageset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableImageset->GUIScheme_IdColumn}, false));
        this->relationGUIScheme_Imageset->Nested = true;
        this->Relations->Add(this->relationGUIScheme_Imageset);
        this->relationGUIScheme_ImagesetFromImage = (gcnew ::System::Data::DataRelation(L"GUIScheme_ImagesetFromImage", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableImagesetFromImage->GUIScheme_IdColumn}, false));
        this->relationGUIScheme_ImagesetFromImage->Nested = true;
        this->Relations->Add(this->relationGUIScheme_ImagesetFromImage);
        this->relationGUIScheme_Font = (gcnew ::System::Data::DataRelation(L"GUIScheme_Font", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableFont->GUIScheme_IdColumn}, false));
        this->relationGUIScheme_Font->Nested = true;
        this->Relations->Add(this->relationGUIScheme_Font);
        this->relationGUIScheme_LookNFeel = (gcnew ::System::Data::DataRelation(L"GUIScheme_LookNFeel", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLookNFeel->GUIScheme_IdColumn}, false));
        this->relationGUIScheme_LookNFeel->Nested = true;
        this->Relations->Add(this->relationGUIScheme_LookNFeel);
        this->relationGUIScheme_WindowSet = (gcnew ::System::Data::DataRelation(L"GUIScheme_WindowSet", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowSet->GUIScheme_IdColumn}, false));
        this->relationGUIScheme_WindowSet->Nested = true;
        this->Relations->Add(this->relationGUIScheme_WindowSet);
        this->relationWindowSet_WindowFactory = (gcnew ::System::Data::DataRelation(L"WindowSet_WindowFactory", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowSet->WindowSet_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowFactory->WindowSet_IdColumn}, false));
        this->relationWindowSet_WindowFactory->Nested = true;
        this->Relations->Add(this->relationWindowSet_WindowFactory);
        this->relationGUIScheme_WindowRendererSet = (gcnew ::System::Data::DataRelation(L"GUIScheme_WindowRendererSet", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowRendererSet->GUIScheme_IdColumn}, false));
        this->relationGUIScheme_WindowRendererSet->Nested = true;
        this->Relations->Add(this->relationGUIScheme_WindowRendererSet);
        this->relationWindowRendererSet_WindowRendererFactory = (gcnew ::System::Data::DataRelation(L"WindowRendererSet_WindowRendererFactory", 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowRendererSet->WindowRendererSet_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowRendererFactory->WindowRendererSet_IdColumn}, 
            false));
        this->relationWindowRendererSet_WindowRendererFactory->Nested = true;
        this->Relations->Add(this->relationWindowRendererSet_WindowRendererFactory);
        this->relationGUIScheme_WindowAlias = (gcnew ::System::Data::DataRelation(L"GUIScheme_WindowAlias", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWindowAlias->GUIScheme_IdColumn}, false));
        this->relationGUIScheme_WindowAlias->Nested = true;
        this->Relations->Add(this->relationGUIScheme_WindowAlias);
        this->relationGUIScheme_FalagardMapping = (gcnew ::System::Data::DataRelation(L"GUIScheme_FalagardMapping", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGUIScheme->GUIScheme_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableFalagardMapping->GUIScheme_IdColumn}, false));
        this->relationGUIScheme_FalagardMapping->Nested = true;
        this->Relations->Add(this->relationGUIScheme_FalagardMapping);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeGUIScheme() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeImageset() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeImagesetFromImage() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeFont() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeLookNFeel() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeWindowSet() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeWindowFactory() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeWindowRendererSet() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeWindowRendererFactory() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeWindowAlias() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeFalagardMapping() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::GUISchemeDataTable::GUISchemeDataTable() {
        this->TableName = L"GUIScheme";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::GUISchemeDataTable::GUISchemeDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::GUISchemeDataTable::GUISchemeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GUISchemeDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GUISchemeDataTable::versionColumn::get() {
        return this->columnversion;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GUISchemeDataTable::GUIScheme_IdColumn::get() {
        return this->columnGUIScheme_Id;
    }
    
    inline ::System::Int32 NewDataSet::GUISchemeDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::GUISchemeDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::GUISchemeDataTable::AddGUISchemeRow(NinjaPlatformer::NewDataSet::GUISchemeRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::GUISchemeDataTable::AddGUISchemeRow(System::String^  name, 
                System::UInt64 version) {
        NinjaPlatformer::NewDataSet::GUISchemeRow^  rowGUISchemeRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, version, nullptr};
        rowGUISchemeRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowGUISchemeRow);
        return rowGUISchemeRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::GUISchemeDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::GUISchemeDataTable::Clone() {
        NinjaPlatformer::NewDataSet::GUISchemeDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::GUISchemeDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::GUISchemeDataTable());
    }
    
    inline ::System::Void NewDataSet::GUISchemeDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnversion = __super::Columns[L"version"];
        this->columnGUIScheme_Id = __super::Columns[L"GUIScheme_Id"];
    }
    
    inline ::System::Void NewDataSet::GUISchemeDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnversion = (gcnew ::System::Data::DataColumn(L"version", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnversion);
        this->columnGUIScheme_Id = (gcnew ::System::Data::DataColumn(L"GUIScheme_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGUIScheme_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnGUIScheme_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnversion->Namespace = L"";
        this->columnversion->DefaultValue = static_cast<System::UInt64>(0);
        this->columnGUIScheme_Id->AutoIncrement = true;
        this->columnGUIScheme_Id->AllowDBNull = false;
        this->columnGUIScheme_Id->Unique = true;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::GUISchemeDataTable::NewGUISchemeRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::GUISchemeDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::GUISchemeRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::GUISchemeDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::GUISchemeRow::typeid;
    }
    
    inline ::System::Void NewDataSet::GUISchemeDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->GUISchemeRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::GUISchemeRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GUISchemeDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->GUISchemeRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::GUISchemeRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GUISchemeDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->GUISchemeRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::GUISchemeRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GUISchemeDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->GUISchemeRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::GUISchemeRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GUISchemeDataTable::RemoveGUISchemeRow(NinjaPlatformer::NewDataSet::GUISchemeRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GUISchemeDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"GUISchemeDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ImagesetDataTable::ImagesetDataTable() {
        this->TableName = L"Imageset";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ImagesetDataTable::ImagesetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ImagesetDataTable::ImagesetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::filenameColumn::get() {
        return this->columnfilename;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::resourceGroupColumn::get() {
        return this->columnresourceGroup;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetDataTable::GUIScheme_IdColumn::get() {
        return this->columnGUIScheme_Id;
    }
    
    inline ::System::Int32 NewDataSet::ImagesetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetRow^  NewDataSet::ImagesetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::AddImagesetRow(NinjaPlatformer::NewDataSet::ImagesetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetRow^  NewDataSet::ImagesetDataTable::AddImagesetRow(System::String^  name, 
                System::String^  filename, System::String^  resourceGroup, NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_Imageset) {
        NinjaPlatformer::NewDataSet::ImagesetRow^  rowImagesetRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {name, filename, resourceGroup, 
            nullptr};
        if (parentGUISchemeRowByGUIScheme_Imageset != nullptr) {
            columnValuesArray[3] = parentGUISchemeRowByGUIScheme_Imageset[2];
        }
        rowImagesetRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowImagesetRow);
        return rowImagesetRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ImagesetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ImagesetDataTable::Clone() {
        NinjaPlatformer::NewDataSet::ImagesetDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ImagesetDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::ImagesetDataTable());
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnfilename = __super::Columns[L"filename"];
        this->columnresourceGroup = __super::Columns[L"resourceGroup"];
        this->columnGUIScheme_Id = __super::Columns[L"GUIScheme_Id"];
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnfilename = (gcnew ::System::Data::DataColumn(L"filename", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfilename);
        this->columnresourceGroup = (gcnew ::System::Data::DataColumn(L"resourceGroup", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnresourceGroup);
        this->columnGUIScheme_Id = (gcnew ::System::Data::DataColumn(L"GUIScheme_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGUIScheme_Id);
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnfilename->AllowDBNull = false;
        this->columnfilename->Namespace = L"";
        this->columnresourceGroup->Namespace = L"";
        this->columnresourceGroup->DefaultValue = (cli::safe_cast<System::String^  >(L""));
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetRow^  NewDataSet::ImagesetDataTable::NewImagesetRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ImagesetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::ImagesetRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ImagesetDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::ImagesetRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ImagesetRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ImagesetRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ImagesetRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ImagesetRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetDataTable::RemoveImagesetRow(NinjaPlatformer::NewDataSet::ImagesetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ImagesetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ImagesetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ImagesetFromImageDataTable::ImagesetFromImageDataTable() {
        this->TableName = L"ImagesetFromImage";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ImagesetFromImageDataTable::ImagesetFromImageDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ImagesetFromImageDataTable::ImagesetFromImageDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetFromImageDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetFromImageDataTable::filenameColumn::get() {
        return this->columnfilename;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetFromImageDataTable::resourceGroupColumn::get() {
        return this->columnresourceGroup;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ImagesetFromImageDataTable::GUIScheme_IdColumn::get() {
        return this->columnGUIScheme_Id;
    }
    
    inline ::System::Int32 NewDataSet::ImagesetFromImageDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  NewDataSet::ImagesetFromImageDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageDataTable::AddImagesetFromImageRow(NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  NewDataSet::ImagesetFromImageDataTable::AddImagesetFromImageRow(
                System::String^  name, System::String^  filename, System::String^  resourceGroup, NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_ImagesetFromImage) {
        NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  rowImagesetFromImageRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {name, filename, resourceGroup, 
            nullptr};
        if (parentGUISchemeRowByGUIScheme_ImagesetFromImage != nullptr) {
            columnValuesArray[3] = parentGUISchemeRowByGUIScheme_ImagesetFromImage[2];
        }
        rowImagesetFromImageRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowImagesetFromImageRow);
        return rowImagesetFromImageRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ImagesetFromImageDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ImagesetFromImageDataTable::Clone() {
        NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ImagesetFromImageDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable());
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnfilename = __super::Columns[L"filename"];
        this->columnresourceGroup = __super::Columns[L"resourceGroup"];
        this->columnGUIScheme_Id = __super::Columns[L"GUIScheme_Id"];
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnfilename = (gcnew ::System::Data::DataColumn(L"filename", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfilename);
        this->columnresourceGroup = (gcnew ::System::Data::DataColumn(L"resourceGroup", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnresourceGroup);
        this->columnGUIScheme_Id = (gcnew ::System::Data::DataColumn(L"GUIScheme_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGUIScheme_Id);
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnfilename->AllowDBNull = false;
        this->columnfilename->Namespace = L"";
        this->columnresourceGroup->Namespace = L"";
        this->columnresourceGroup->DefaultValue = (cli::safe_cast<System::String^  >(L""));
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  NewDataSet::ImagesetFromImageDataTable::NewImagesetFromImageRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ImagesetFromImageDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::ImagesetFromImageRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ImagesetFromImageDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::ImagesetFromImageRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ImagesetFromImageRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetFromImageRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ImagesetFromImageRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetFromImageRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ImagesetFromImageRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetFromImageRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ImagesetFromImageRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::ImagesetFromImageRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageDataTable::RemoveImagesetFromImageRow(NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ImagesetFromImageDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ImagesetFromImageDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::FontDataTable::FontDataTable() {
        this->TableName = L"Font";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::FontDataTable::FontDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::FontDataTable::FontDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FontDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FontDataTable::filenameColumn::get() {
        return this->columnfilename;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FontDataTable::resourceGroupColumn::get() {
        return this->columnresourceGroup;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FontDataTable::GUIScheme_IdColumn::get() {
        return this->columnGUIScheme_Id;
    }
    
    inline ::System::Int32 NewDataSet::FontDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::FontRow^  NewDataSet::FontDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::FontRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::FontDataTable::AddFontRow(NinjaPlatformer::NewDataSet::FontRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::FontRow^  NewDataSet::FontDataTable::AddFontRow(System::String^  name, System::String^  filename, 
                System::String^  resourceGroup, NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_Font) {
        NinjaPlatformer::NewDataSet::FontRow^  rowFontRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::FontRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {name, filename, resourceGroup, 
            nullptr};
        if (parentGUISchemeRowByGUIScheme_Font != nullptr) {
            columnValuesArray[3] = parentGUISchemeRowByGUIScheme_Font[2];
        }
        rowFontRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowFontRow);
        return rowFontRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::FontDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::FontDataTable::Clone() {
        NinjaPlatformer::NewDataSet::FontDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::FontDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::FontDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::FontDataTable());
    }
    
    inline ::System::Void NewDataSet::FontDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnfilename = __super::Columns[L"filename"];
        this->columnresourceGroup = __super::Columns[L"resourceGroup"];
        this->columnGUIScheme_Id = __super::Columns[L"GUIScheme_Id"];
    }
    
    inline ::System::Void NewDataSet::FontDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnfilename = (gcnew ::System::Data::DataColumn(L"filename", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfilename);
        this->columnresourceGroup = (gcnew ::System::Data::DataColumn(L"resourceGroup", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnresourceGroup);
        this->columnGUIScheme_Id = (gcnew ::System::Data::DataColumn(L"GUIScheme_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGUIScheme_Id);
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnfilename->AllowDBNull = false;
        this->columnfilename->Namespace = L"";
        this->columnresourceGroup->Namespace = L"";
        this->columnresourceGroup->DefaultValue = (cli::safe_cast<System::String^  >(L""));
    }
    
    inline NinjaPlatformer::NewDataSet::FontRow^  NewDataSet::FontDataTable::NewFontRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::FontRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::FontDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::FontRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::FontDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::FontRow::typeid;
    }
    
    inline ::System::Void NewDataSet::FontDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->FontRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::FontRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::FontRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::FontDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->FontRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::FontRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::FontRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::FontDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->FontRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::FontRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::FontRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::FontDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->FontRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::FontRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::FontRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::FontDataTable::RemoveFontRow(NinjaPlatformer::NewDataSet::FontRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::FontDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"FontDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::LookNFeelDataTable::LookNFeelDataTable() {
        this->TableName = L"LookNFeel";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::LookNFeelDataTable::LookNFeelDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::LookNFeelDataTable::LookNFeelDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::LookNFeelDataTable::filenameColumn::get() {
        return this->columnfilename;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::LookNFeelDataTable::resourceGroupColumn::get() {
        return this->columnresourceGroup;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::LookNFeelDataTable::GUIScheme_IdColumn::get() {
        return this->columnGUIScheme_Id;
    }
    
    inline ::System::Int32 NewDataSet::LookNFeelDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::LookNFeelRow^  NewDataSet::LookNFeelDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::LookNFeelDataTable::AddLookNFeelRow(NinjaPlatformer::NewDataSet::LookNFeelRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::LookNFeelRow^  NewDataSet::LookNFeelDataTable::AddLookNFeelRow(System::String^  filename, 
                System::String^  resourceGroup, NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_LookNFeel) {
        NinjaPlatformer::NewDataSet::LookNFeelRow^  rowLookNFeelRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {filename, resourceGroup, 
            nullptr};
        if (parentGUISchemeRowByGUIScheme_LookNFeel != nullptr) {
            columnValuesArray[2] = parentGUISchemeRowByGUIScheme_LookNFeel[2];
        }
        rowLookNFeelRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowLookNFeelRow);
        return rowLookNFeelRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::LookNFeelDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::LookNFeelDataTable::Clone() {
        NinjaPlatformer::NewDataSet::LookNFeelDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::LookNFeelDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::LookNFeelDataTable());
    }
    
    inline ::System::Void NewDataSet::LookNFeelDataTable::InitVars() {
        this->columnfilename = __super::Columns[L"filename"];
        this->columnresourceGroup = __super::Columns[L"resourceGroup"];
        this->columnGUIScheme_Id = __super::Columns[L"GUIScheme_Id"];
    }
    
    inline ::System::Void NewDataSet::LookNFeelDataTable::InitClass() {
        this->columnfilename = (gcnew ::System::Data::DataColumn(L"filename", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfilename);
        this->columnresourceGroup = (gcnew ::System::Data::DataColumn(L"resourceGroup", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnresourceGroup);
        this->columnGUIScheme_Id = (gcnew ::System::Data::DataColumn(L"GUIScheme_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGUIScheme_Id);
        this->columnfilename->AllowDBNull = false;
        this->columnfilename->Namespace = L"";
        this->columnresourceGroup->Namespace = L"";
        this->columnresourceGroup->DefaultValue = (cli::safe_cast<System::String^  >(L""));
    }
    
    inline NinjaPlatformer::NewDataSet::LookNFeelRow^  NewDataSet::LookNFeelDataTable::NewLookNFeelRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::LookNFeelDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::LookNFeelRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::LookNFeelDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::LookNFeelRow::typeid;
    }
    
    inline ::System::Void NewDataSet::LookNFeelDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->LookNFeelRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::LookNFeelRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::LookNFeelDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->LookNFeelRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::LookNFeelRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::LookNFeelDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->LookNFeelRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::LookNFeelRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::LookNFeelDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->LookNFeelRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::LookNFeelRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::LookNFeelDataTable::RemoveLookNFeelRow(NinjaPlatformer::NewDataSet::LookNFeelRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::LookNFeelDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"LookNFeelDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::WindowSetDataTable::WindowSetDataTable() {
        this->TableName = L"WindowSet";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::WindowSetDataTable::WindowSetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::WindowSetDataTable::WindowSetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowSetDataTable::filenameColumn::get() {
        return this->columnfilename;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowSetDataTable::WindowSet_IdColumn::get() {
        return this->columnWindowSet_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowSetDataTable::GUIScheme_IdColumn::get() {
        return this->columnGUIScheme_Id;
    }
    
    inline ::System::Int32 NewDataSet::WindowSetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowSetRow^  NewDataSet::WindowSetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::WindowSetDataTable::AddWindowSetRow(NinjaPlatformer::NewDataSet::WindowSetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::WindowSetRow^  NewDataSet::WindowSetDataTable::AddWindowSetRow(System::String^  filename, 
                NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_WindowSet) {
        NinjaPlatformer::NewDataSet::WindowSetRow^  rowWindowSetRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {filename, nullptr, 
            nullptr};
        if (parentGUISchemeRowByGUIScheme_WindowSet != nullptr) {
            columnValuesArray[2] = parentGUISchemeRowByGUIScheme_WindowSet[2];
        }
        rowWindowSetRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowWindowSetRow);
        return rowWindowSetRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::WindowSetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowSetDataTable::Clone() {
        NinjaPlatformer::NewDataSet::WindowSetDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowSetDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::WindowSetDataTable());
    }
    
    inline ::System::Void NewDataSet::WindowSetDataTable::InitVars() {
        this->columnfilename = __super::Columns[L"filename"];
        this->columnWindowSet_Id = __super::Columns[L"WindowSet_Id"];
        this->columnGUIScheme_Id = __super::Columns[L"GUIScheme_Id"];
    }
    
    inline ::System::Void NewDataSet::WindowSetDataTable::InitClass() {
        this->columnfilename = (gcnew ::System::Data::DataColumn(L"filename", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfilename);
        this->columnWindowSet_Id = (gcnew ::System::Data::DataColumn(L"WindowSet_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnWindowSet_Id);
        this->columnGUIScheme_Id = (gcnew ::System::Data::DataColumn(L"GUIScheme_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGUIScheme_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnWindowSet_Id}, 
                true)));
        this->columnfilename->AllowDBNull = false;
        this->columnfilename->Namespace = L"";
        this->columnWindowSet_Id->AutoIncrement = true;
        this->columnWindowSet_Id->AllowDBNull = false;
        this->columnWindowSet_Id->Unique = true;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowSetRow^  NewDataSet::WindowSetDataTable::NewWindowSetRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::WindowSetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::WindowSetRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::WindowSetDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::WindowSetRow::typeid;
    }
    
    inline ::System::Void NewDataSet::WindowSetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->WindowSetRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::WindowSetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowSetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->WindowSetRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::WindowSetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowSetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->WindowSetRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::WindowSetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowSetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->WindowSetRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::WindowSetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowSetDataTable::RemoveWindowSetRow(NinjaPlatformer::NewDataSet::WindowSetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::WindowSetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"WindowSetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::WindowFactoryDataTable::WindowFactoryDataTable() {
        this->TableName = L"WindowFactory";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::WindowFactoryDataTable::WindowFactoryDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::WindowFactoryDataTable::WindowFactoryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowFactoryDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowFactoryDataTable::WindowSet_IdColumn::get() {
        return this->columnWindowSet_Id;
    }
    
    inline ::System::Int32 NewDataSet::WindowFactoryDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowFactoryRow^  NewDataSet::WindowFactoryDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::WindowFactoryDataTable::AddWindowFactoryRow(NinjaPlatformer::NewDataSet::WindowFactoryRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::WindowFactoryRow^  NewDataSet::WindowFactoryDataTable::AddWindowFactoryRow(System::String^  name, 
                NinjaPlatformer::NewDataSet::WindowSetRow^  parentWindowSetRowByWindowSet_WindowFactory) {
        NinjaPlatformer::NewDataSet::WindowFactoryRow^  rowWindowFactoryRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {name, nullptr};
        if (parentWindowSetRowByWindowSet_WindowFactory != nullptr) {
            columnValuesArray[1] = parentWindowSetRowByWindowSet_WindowFactory[1];
        }
        rowWindowFactoryRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowWindowFactoryRow);
        return rowWindowFactoryRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::WindowFactoryDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowFactoryDataTable::Clone() {
        NinjaPlatformer::NewDataSet::WindowFactoryDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowFactoryDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::WindowFactoryDataTable());
    }
    
    inline ::System::Void NewDataSet::WindowFactoryDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnWindowSet_Id = __super::Columns[L"WindowSet_Id"];
    }
    
    inline ::System::Void NewDataSet::WindowFactoryDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnWindowSet_Id = (gcnew ::System::Data::DataColumn(L"WindowSet_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnWindowSet_Id);
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
    }
    
    inline NinjaPlatformer::NewDataSet::WindowFactoryRow^  NewDataSet::WindowFactoryDataTable::NewWindowFactoryRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::WindowFactoryDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::WindowFactoryRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::WindowFactoryDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::WindowFactoryRow::typeid;
    }
    
    inline ::System::Void NewDataSet::WindowFactoryDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->WindowFactoryRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::WindowFactoryRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowFactoryDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->WindowFactoryRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::WindowFactoryRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowFactoryDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->WindowFactoryRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::WindowFactoryRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowFactoryDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->WindowFactoryRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::WindowFactoryRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowFactoryDataTable::RemoveWindowFactoryRow(NinjaPlatformer::NewDataSet::WindowFactoryRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::WindowFactoryDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"WindowFactoryDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::WindowRendererSetDataTable::WindowRendererSetDataTable() {
        this->TableName = L"WindowRendererSet";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::WindowRendererSetDataTable::WindowRendererSetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::WindowRendererSetDataTable::WindowRendererSetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowRendererSetDataTable::filenameColumn::get() {
        return this->columnfilename;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowRendererSetDataTable::WindowRendererSet_IdColumn::get() {
        return this->columnWindowRendererSet_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowRendererSetDataTable::GUIScheme_IdColumn::get() {
        return this->columnGUIScheme_Id;
    }
    
    inline ::System::Int32 NewDataSet::WindowRendererSetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererSetRow^  NewDataSet::WindowRendererSetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::WindowRendererSetDataTable::AddWindowRendererSetRow(NinjaPlatformer::NewDataSet::WindowRendererSetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererSetRow^  NewDataSet::WindowRendererSetDataTable::AddWindowRendererSetRow(
                System::String^  filename, NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_WindowRendererSet) {
        NinjaPlatformer::NewDataSet::WindowRendererSetRow^  rowWindowRendererSetRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {filename, nullptr, 
            nullptr};
        if (parentGUISchemeRowByGUIScheme_WindowRendererSet != nullptr) {
            columnValuesArray[2] = parentGUISchemeRowByGUIScheme_WindowRendererSet[2];
        }
        rowWindowRendererSetRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowWindowRendererSetRow);
        return rowWindowRendererSetRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::WindowRendererSetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowRendererSetDataTable::Clone() {
        NinjaPlatformer::NewDataSet::WindowRendererSetDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowRendererSetDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::WindowRendererSetDataTable());
    }
    
    inline ::System::Void NewDataSet::WindowRendererSetDataTable::InitVars() {
        this->columnfilename = __super::Columns[L"filename"];
        this->columnWindowRendererSet_Id = __super::Columns[L"WindowRendererSet_Id"];
        this->columnGUIScheme_Id = __super::Columns[L"GUIScheme_Id"];
    }
    
    inline ::System::Void NewDataSet::WindowRendererSetDataTable::InitClass() {
        this->columnfilename = (gcnew ::System::Data::DataColumn(L"filename", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfilename);
        this->columnWindowRendererSet_Id = (gcnew ::System::Data::DataColumn(L"WindowRendererSet_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnWindowRendererSet_Id);
        this->columnGUIScheme_Id = (gcnew ::System::Data::DataColumn(L"GUIScheme_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGUIScheme_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnWindowRendererSet_Id}, 
                true)));
        this->columnfilename->AllowDBNull = false;
        this->columnfilename->Namespace = L"";
        this->columnWindowRendererSet_Id->AutoIncrement = true;
        this->columnWindowRendererSet_Id->AllowDBNull = false;
        this->columnWindowRendererSet_Id->Unique = true;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererSetRow^  NewDataSet::WindowRendererSetDataTable::NewWindowRendererSetRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::WindowRendererSetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::WindowRendererSetRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::WindowRendererSetDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::WindowRendererSetRow::typeid;
    }
    
    inline ::System::Void NewDataSet::WindowRendererSetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->WindowRendererSetRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::WindowRendererSetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowRendererSetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->WindowRendererSetRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::WindowRendererSetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowRendererSetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->WindowRendererSetRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::WindowRendererSetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowRendererSetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->WindowRendererSetRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::WindowRendererSetRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowRendererSetDataTable::RemoveWindowRendererSetRow(NinjaPlatformer::NewDataSet::WindowRendererSetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::WindowRendererSetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"WindowRendererSetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::WindowRendererFactoryDataTable::WindowRendererFactoryDataTable() {
        this->TableName = L"WindowRendererFactory";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::WindowRendererFactoryDataTable::WindowRendererFactoryDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::WindowRendererFactoryDataTable::WindowRendererFactoryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowRendererFactoryDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowRendererFactoryDataTable::WindowRendererSet_IdColumn::get() {
        return this->columnWindowRendererSet_Id;
    }
    
    inline ::System::Int32 NewDataSet::WindowRendererFactoryDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  NewDataSet::WindowRendererFactoryDataTable::default::get(
                ::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::WindowRendererFactoryDataTable::AddWindowRendererFactoryRow(NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  NewDataSet::WindowRendererFactoryDataTable::AddWindowRendererFactoryRow(
                System::String^  name, NinjaPlatformer::NewDataSet::WindowRendererSetRow^  parentWindowRendererSetRowByWindowRendererSet_WindowRendererFactory) {
        NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  rowWindowRendererFactoryRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {name, nullptr};
        if (parentWindowRendererSetRowByWindowRendererSet_WindowRendererFactory != nullptr) {
            columnValuesArray[1] = parentWindowRendererSetRowByWindowRendererSet_WindowRendererFactory[1];
        }
        rowWindowRendererFactoryRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowWindowRendererFactoryRow);
        return rowWindowRendererFactoryRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::WindowRendererFactoryDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowRendererFactoryDataTable::Clone() {
        NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowRendererFactoryDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable());
    }
    
    inline ::System::Void NewDataSet::WindowRendererFactoryDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnWindowRendererSet_Id = __super::Columns[L"WindowRendererSet_Id"];
    }
    
    inline ::System::Void NewDataSet::WindowRendererFactoryDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnWindowRendererSet_Id = (gcnew ::System::Data::DataColumn(L"WindowRendererSet_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnWindowRendererSet_Id);
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  NewDataSet::WindowRendererFactoryDataTable::NewWindowRendererFactoryRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::WindowRendererFactoryDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::WindowRendererFactoryRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::WindowRendererFactoryDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::WindowRendererFactoryRow::typeid;
    }
    
    inline ::System::Void NewDataSet::WindowRendererFactoryDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->WindowRendererFactoryRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::WindowRendererFactoryRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowRendererFactoryDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->WindowRendererFactoryRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::WindowRendererFactoryRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowRendererFactoryDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->WindowRendererFactoryRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::WindowRendererFactoryRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowRendererFactoryDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->WindowRendererFactoryRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::WindowRendererFactoryRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowRendererFactoryDataTable::RemoveWindowRendererFactoryRow(NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::WindowRendererFactoryDataTable::GetTypedTableSchema(
                ::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"WindowRendererFactoryDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::WindowAliasDataTable::WindowAliasDataTable() {
        this->TableName = L"WindowAlias";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::WindowAliasDataTable::WindowAliasDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::WindowAliasDataTable::WindowAliasDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowAliasDataTable::aliasColumn::get() {
        return this->columnalias;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowAliasDataTable::targetColumn::get() {
        return this->columntarget;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WindowAliasDataTable::GUIScheme_IdColumn::get() {
        return this->columnGUIScheme_Id;
    }
    
    inline ::System::Int32 NewDataSet::WindowAliasDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowAliasRow^  NewDataSet::WindowAliasDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::WindowAliasDataTable::AddWindowAliasRow(NinjaPlatformer::NewDataSet::WindowAliasRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::WindowAliasRow^  NewDataSet::WindowAliasDataTable::AddWindowAliasRow(System::String^  alias, 
                System::String^  target, NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_WindowAlias) {
        NinjaPlatformer::NewDataSet::WindowAliasRow^  rowWindowAliasRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {alias, target, nullptr};
        if (parentGUISchemeRowByGUIScheme_WindowAlias != nullptr) {
            columnValuesArray[2] = parentGUISchemeRowByGUIScheme_WindowAlias[2];
        }
        rowWindowAliasRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowWindowAliasRow);
        return rowWindowAliasRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::WindowAliasDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowAliasDataTable::Clone() {
        NinjaPlatformer::NewDataSet::WindowAliasDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WindowAliasDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::WindowAliasDataTable());
    }
    
    inline ::System::Void NewDataSet::WindowAliasDataTable::InitVars() {
        this->columnalias = __super::Columns[L"alias"];
        this->columntarget = __super::Columns[L"target"];
        this->columnGUIScheme_Id = __super::Columns[L"GUIScheme_Id"];
    }
    
    inline ::System::Void NewDataSet::WindowAliasDataTable::InitClass() {
        this->columnalias = (gcnew ::System::Data::DataColumn(L"alias", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnalias);
        this->columntarget = (gcnew ::System::Data::DataColumn(L"target", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntarget);
        this->columnGUIScheme_Id = (gcnew ::System::Data::DataColumn(L"GUIScheme_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGUIScheme_Id);
        this->columnalias->AllowDBNull = false;
        this->columnalias->Namespace = L"";
        this->columntarget->AllowDBNull = false;
        this->columntarget->Namespace = L"";
    }
    
    inline NinjaPlatformer::NewDataSet::WindowAliasRow^  NewDataSet::WindowAliasDataTable::NewWindowAliasRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::WindowAliasDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::WindowAliasRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::WindowAliasDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::WindowAliasRow::typeid;
    }
    
    inline ::System::Void NewDataSet::WindowAliasDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->WindowAliasRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::WindowAliasRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowAliasDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->WindowAliasRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::WindowAliasRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowAliasDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->WindowAliasRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::WindowAliasRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowAliasDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->WindowAliasRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::WindowAliasRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WindowAliasDataTable::RemoveWindowAliasRow(NinjaPlatformer::NewDataSet::WindowAliasRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::WindowAliasDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"WindowAliasDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::FalagardMappingDataTable::FalagardMappingDataTable() {
        this->TableName = L"FalagardMapping";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::FalagardMappingDataTable::FalagardMappingDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::FalagardMappingDataTable::FalagardMappingDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FalagardMappingDataTable::windowTypeColumn::get() {
        return this->columnwindowType;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FalagardMappingDataTable::targetTypeColumn::get() {
        return this->columntargetType;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FalagardMappingDataTable::rendererColumn::get() {
        return this->columnrenderer;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FalagardMappingDataTable::lookNFeelColumn::get() {
        return this->columnlookNFeel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FalagardMappingDataTable::renderEffectColumn::get() {
        return this->columnrenderEffect;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::FalagardMappingDataTable::GUIScheme_IdColumn::get() {
        return this->columnGUIScheme_Id;
    }
    
    inline ::System::Int32 NewDataSet::FalagardMappingDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline NinjaPlatformer::NewDataSet::FalagardMappingRow^  NewDataSet::FalagardMappingDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::FalagardMappingDataTable::AddFalagardMappingRow(NinjaPlatformer::NewDataSet::FalagardMappingRow^  row) {
        this->Rows->Add(row);
    }
    
    inline NinjaPlatformer::NewDataSet::FalagardMappingRow^  NewDataSet::FalagardMappingDataTable::AddFalagardMappingRow(
                System::String^  windowType, 
                System::String^  targetType, 
                System::String^  renderer, 
                System::String^  lookNFeel, 
                System::String^  renderEffect, 
                NinjaPlatformer::NewDataSet::GUISchemeRow^  parentGUISchemeRowByGUIScheme_FalagardMapping) {
        NinjaPlatformer::NewDataSet::FalagardMappingRow^  rowFalagardMappingRow = (cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {windowType, targetType, 
            renderer, lookNFeel, renderEffect, nullptr};
        if (parentGUISchemeRowByGUIScheme_FalagardMapping != nullptr) {
            columnValuesArray[5] = parentGUISchemeRowByGUIScheme_FalagardMapping[2];
        }
        rowFalagardMappingRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowFalagardMappingRow);
        return rowFalagardMappingRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::FalagardMappingDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::FalagardMappingDataTable::Clone() {
        NinjaPlatformer::NewDataSet::FalagardMappingDataTable^  cln = (cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::FalagardMappingDataTable::CreateInstance() {
        return (gcnew NinjaPlatformer::NewDataSet::FalagardMappingDataTable());
    }
    
    inline ::System::Void NewDataSet::FalagardMappingDataTable::InitVars() {
        this->columnwindowType = __super::Columns[L"windowType"];
        this->columntargetType = __super::Columns[L"targetType"];
        this->columnrenderer = __super::Columns[L"renderer"];
        this->columnlookNFeel = __super::Columns[L"lookNFeel"];
        this->columnrenderEffect = __super::Columns[L"renderEffect"];
        this->columnGUIScheme_Id = __super::Columns[L"GUIScheme_Id"];
    }
    
    inline ::System::Void NewDataSet::FalagardMappingDataTable::InitClass() {
        this->columnwindowType = (gcnew ::System::Data::DataColumn(L"windowType", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnwindowType);
        this->columntargetType = (gcnew ::System::Data::DataColumn(L"targetType", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntargetType);
        this->columnrenderer = (gcnew ::System::Data::DataColumn(L"renderer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrenderer);
        this->columnlookNFeel = (gcnew ::System::Data::DataColumn(L"lookNFeel", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlookNFeel);
        this->columnrenderEffect = (gcnew ::System::Data::DataColumn(L"renderEffect", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrenderEffect);
        this->columnGUIScheme_Id = (gcnew ::System::Data::DataColumn(L"GUIScheme_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGUIScheme_Id);
        this->columnwindowType->AllowDBNull = false;
        this->columnwindowType->Namespace = L"";
        this->columntargetType->AllowDBNull = false;
        this->columntargetType->Namespace = L"";
        this->columnrenderer->AllowDBNull = false;
        this->columnrenderer->Namespace = L"";
        this->columnlookNFeel->AllowDBNull = false;
        this->columnlookNFeel->Namespace = L"";
        this->columnrenderEffect->Namespace = L"";
        this->columnrenderEffect->DefaultValue = (cli::safe_cast<System::String^  >(L""));
    }
    
    inline NinjaPlatformer::NewDataSet::FalagardMappingRow^  NewDataSet::FalagardMappingDataTable::NewFalagardMappingRow() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::FalagardMappingDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew NinjaPlatformer::NewDataSet::FalagardMappingRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::FalagardMappingDataTable::GetRowType() {
        return NinjaPlatformer::NewDataSet::FalagardMappingRow::typeid;
    }
    
    inline ::System::Void NewDataSet::FalagardMappingDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->FalagardMappingRowChanged(this, (gcnew NinjaPlatformer::NewDataSet::FalagardMappingRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::FalagardMappingDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->FalagardMappingRowChanging(this, (gcnew NinjaPlatformer::NewDataSet::FalagardMappingRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::FalagardMappingDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->FalagardMappingRowDeleted(this, (gcnew NinjaPlatformer::NewDataSet::FalagardMappingRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::FalagardMappingDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->FalagardMappingRowDeleting(this, (gcnew NinjaPlatformer::NewDataSet::FalagardMappingRowChangeEvent((cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::FalagardMappingDataTable::RemoveFalagardMappingRow(NinjaPlatformer::NewDataSet::FalagardMappingRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::FalagardMappingDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        NinjaPlatformer::NewDataSet^  ds = (gcnew NinjaPlatformer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"FalagardMappingDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::GUISchemeRow::GUISchemeRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableGUIScheme = (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::GUISchemeRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableGUIScheme->nameColumn]));
    }
    inline System::Void NewDataSet::GUISchemeRow::name::set(System::String^  value) {
        this[this->tableGUIScheme->nameColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::GUISchemeRow::version::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableGUIScheme->versionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'version\' in table \'GUIScheme\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::GUISchemeRow::version::set(System::UInt64 value) {
        this[this->tableGUIScheme->versionColumn] = value;
    }
    
    inline System::Int32 NewDataSet::GUISchemeRow::GUIScheme_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableGUIScheme->GUIScheme_IdColumn]));
    }
    inline System::Void NewDataSet::GUISchemeRow::GUIScheme_Id::set(System::Int32 value) {
        this[this->tableGUIScheme->GUIScheme_IdColumn] = value;
    }
    
    inline ::System::Boolean NewDataSet::GUISchemeRow::IsversionNull() {
        return this->IsNull(this->tableGUIScheme->versionColumn);
    }
    
    inline ::System::Void NewDataSet::GUISchemeRow::SetversionNull() {
        this[this->tableGUIScheme->versionColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::ImagesetRow^  >^  NewDataSet::GUISchemeRow::GetImagesetRows() {
        if (this->Table->ChildRelations[L"GUIScheme_Imageset"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::ImagesetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::ImagesetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"GUIScheme_Imageset"])));
        }
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >^  NewDataSet::GUISchemeRow::GetImagesetFromImageRows() {
        if (this->Table->ChildRelations[L"GUIScheme_ImagesetFromImage"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"GUIScheme_ImagesetFromImage"])));
        }
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::FontRow^  >^  NewDataSet::GUISchemeRow::GetFontRows() {
        if (this->Table->ChildRelations[L"GUIScheme_Font"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::FontRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::FontRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"GUIScheme_Font"])));
        }
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::LookNFeelRow^  >^  NewDataSet::GUISchemeRow::GetLookNFeelRows() {
        if (this->Table->ChildRelations[L"GUIScheme_LookNFeel"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::LookNFeelRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::LookNFeelRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"GUIScheme_LookNFeel"])));
        }
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::WindowSetRow^  >^  NewDataSet::GUISchemeRow::GetWindowSetRows() {
        if (this->Table->ChildRelations[L"GUIScheme_WindowSet"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::WindowSetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::WindowSetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"GUIScheme_WindowSet"])));
        }
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >^  NewDataSet::GUISchemeRow::GetWindowRendererSetRows() {
        if (this->Table->ChildRelations[L"GUIScheme_WindowRendererSet"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"GUIScheme_WindowRendererSet"])));
        }
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::WindowAliasRow^  >^  NewDataSet::GUISchemeRow::GetWindowAliasRows() {
        if (this->Table->ChildRelations[L"GUIScheme_WindowAlias"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::WindowAliasRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::WindowAliasRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"GUIScheme_WindowAlias"])));
        }
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::FalagardMappingRow^  >^  NewDataSet::GUISchemeRow::GetFalagardMappingRows() {
        if (this->Table->ChildRelations[L"GUIScheme_FalagardMapping"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::FalagardMappingRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::FalagardMappingRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"GUIScheme_FalagardMapping"])));
        }
    }
    
    
    inline NewDataSet::ImagesetRow::ImagesetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableImageset = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ImagesetRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableImageset->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Imageset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetRow::name::set(System::String^  value) {
        this[this->tableImageset->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::ImagesetRow::filename::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableImageset->filenameColumn]));
    }
    inline System::Void NewDataSet::ImagesetRow::filename::set(System::String^  value) {
        this[this->tableImageset->filenameColumn] = value;
    }
    
    inline System::String^  NewDataSet::ImagesetRow::resourceGroup::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableImageset->resourceGroupColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'resourceGroup\' in table \'Imageset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetRow::resourceGroup::set(System::String^  value) {
        this[this->tableImageset->resourceGroupColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ImagesetRow::GUIScheme_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableImageset->GUIScheme_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GUIScheme_Id\' in table \'Imageset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetRow::GUIScheme_Id::set(System::Int32 value) {
        this[this->tableImageset->GUIScheme_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::ImagesetRow::GUISchemeRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->GetParentRow(this->Table->ParentRelations[L"GUIScheme_Imageset"])));
    }
    inline System::Void NewDataSet::ImagesetRow::GUISchemeRow::set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"GUIScheme_Imageset"]);
    }
    
    inline ::System::Boolean NewDataSet::ImagesetRow::IsnameNull() {
        return this->IsNull(this->tableImageset->nameColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetRow::SetnameNull() {
        this[this->tableImageset->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ImagesetRow::IsresourceGroupNull() {
        return this->IsNull(this->tableImageset->resourceGroupColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetRow::SetresourceGroupNull() {
        this[this->tableImageset->resourceGroupColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ImagesetRow::IsGUIScheme_IdNull() {
        return this->IsNull(this->tableImageset->GUIScheme_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetRow::SetGUIScheme_IdNull() {
        this[this->tableImageset->GUIScheme_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::ImagesetFromImageRow::ImagesetFromImageRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableImagesetFromImage = (cli::safe_cast<NinjaPlatformer::NewDataSet::ImagesetFromImageDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ImagesetFromImageRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableImagesetFromImage->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'ImagesetFromImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetFromImageRow::name::set(System::String^  value) {
        this[this->tableImagesetFromImage->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::ImagesetFromImageRow::filename::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableImagesetFromImage->filenameColumn]));
    }
    inline System::Void NewDataSet::ImagesetFromImageRow::filename::set(System::String^  value) {
        this[this->tableImagesetFromImage->filenameColumn] = value;
    }
    
    inline System::String^  NewDataSet::ImagesetFromImageRow::resourceGroup::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableImagesetFromImage->resourceGroupColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'resourceGroup\' in table \'ImagesetFromImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetFromImageRow::resourceGroup::set(System::String^  value) {
        this[this->tableImagesetFromImage->resourceGroupColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ImagesetFromImageRow::GUIScheme_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableImagesetFromImage->GUIScheme_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GUIScheme_Id\' in table \'ImagesetFromImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ImagesetFromImageRow::GUIScheme_Id::set(System::Int32 value) {
        this[this->tableImagesetFromImage->GUIScheme_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::ImagesetFromImageRow::GUISchemeRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->GetParentRow(this->Table->ParentRelations[L"GUIScheme_ImagesetFromImage"])));
    }
    inline System::Void NewDataSet::ImagesetFromImageRow::GUISchemeRow::set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"GUIScheme_ImagesetFromImage"]);
    }
    
    inline ::System::Boolean NewDataSet::ImagesetFromImageRow::IsnameNull() {
        return this->IsNull(this->tableImagesetFromImage->nameColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageRow::SetnameNull() {
        this[this->tableImagesetFromImage->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ImagesetFromImageRow::IsresourceGroupNull() {
        return this->IsNull(this->tableImagesetFromImage->resourceGroupColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageRow::SetresourceGroupNull() {
        this[this->tableImagesetFromImage->resourceGroupColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ImagesetFromImageRow::IsGUIScheme_IdNull() {
        return this->IsNull(this->tableImagesetFromImage->GUIScheme_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ImagesetFromImageRow::SetGUIScheme_IdNull() {
        this[this->tableImagesetFromImage->GUIScheme_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::FontRow::FontRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableFont = (cli::safe_cast<NinjaPlatformer::NewDataSet::FontDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::FontRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableFont->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Font\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::FontRow::name::set(System::String^  value) {
        this[this->tableFont->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::FontRow::filename::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableFont->filenameColumn]));
    }
    inline System::Void NewDataSet::FontRow::filename::set(System::String^  value) {
        this[this->tableFont->filenameColumn] = value;
    }
    
    inline System::String^  NewDataSet::FontRow::resourceGroup::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableFont->resourceGroupColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'resourceGroup\' in table \'Font\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::FontRow::resourceGroup::set(System::String^  value) {
        this[this->tableFont->resourceGroupColumn] = value;
    }
    
    inline System::Int32 NewDataSet::FontRow::GUIScheme_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableFont->GUIScheme_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GUIScheme_Id\' in table \'Font\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::FontRow::GUIScheme_Id::set(System::Int32 value) {
        this[this->tableFont->GUIScheme_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::FontRow::GUISchemeRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->GetParentRow(this->Table->ParentRelations[L"GUIScheme_Font"])));
    }
    inline System::Void NewDataSet::FontRow::GUISchemeRow::set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"GUIScheme_Font"]);
    }
    
    inline ::System::Boolean NewDataSet::FontRow::IsnameNull() {
        return this->IsNull(this->tableFont->nameColumn);
    }
    
    inline ::System::Void NewDataSet::FontRow::SetnameNull() {
        this[this->tableFont->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::FontRow::IsresourceGroupNull() {
        return this->IsNull(this->tableFont->resourceGroupColumn);
    }
    
    inline ::System::Void NewDataSet::FontRow::SetresourceGroupNull() {
        this[this->tableFont->resourceGroupColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::FontRow::IsGUIScheme_IdNull() {
        return this->IsNull(this->tableFont->GUIScheme_IdColumn);
    }
    
    inline ::System::Void NewDataSet::FontRow::SetGUIScheme_IdNull() {
        this[this->tableFont->GUIScheme_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::LookNFeelRow::LookNFeelRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableLookNFeel = (cli::safe_cast<NinjaPlatformer::NewDataSet::LookNFeelDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::LookNFeelRow::filename::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableLookNFeel->filenameColumn]));
    }
    inline System::Void NewDataSet::LookNFeelRow::filename::set(System::String^  value) {
        this[this->tableLookNFeel->filenameColumn] = value;
    }
    
    inline System::String^  NewDataSet::LookNFeelRow::resourceGroup::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableLookNFeel->resourceGroupColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'resourceGroup\' in table \'LookNFeel\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::LookNFeelRow::resourceGroup::set(System::String^  value) {
        this[this->tableLookNFeel->resourceGroupColumn] = value;
    }
    
    inline System::Int32 NewDataSet::LookNFeelRow::GUIScheme_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableLookNFeel->GUIScheme_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GUIScheme_Id\' in table \'LookNFeel\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::LookNFeelRow::GUIScheme_Id::set(System::Int32 value) {
        this[this->tableLookNFeel->GUIScheme_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::LookNFeelRow::GUISchemeRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->GetParentRow(this->Table->ParentRelations[L"GUIScheme_LookNFeel"])));
    }
    inline System::Void NewDataSet::LookNFeelRow::GUISchemeRow::set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"GUIScheme_LookNFeel"]);
    }
    
    inline ::System::Boolean NewDataSet::LookNFeelRow::IsresourceGroupNull() {
        return this->IsNull(this->tableLookNFeel->resourceGroupColumn);
    }
    
    inline ::System::Void NewDataSet::LookNFeelRow::SetresourceGroupNull() {
        this[this->tableLookNFeel->resourceGroupColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::LookNFeelRow::IsGUIScheme_IdNull() {
        return this->IsNull(this->tableLookNFeel->GUIScheme_IdColumn);
    }
    
    inline ::System::Void NewDataSet::LookNFeelRow::SetGUIScheme_IdNull() {
        this[this->tableLookNFeel->GUIScheme_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::WindowSetRow::WindowSetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableWindowSet = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::WindowSetRow::filename::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableWindowSet->filenameColumn]));
    }
    inline System::Void NewDataSet::WindowSetRow::filename::set(System::String^  value) {
        this[this->tableWindowSet->filenameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WindowSetRow::WindowSet_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableWindowSet->WindowSet_IdColumn]));
    }
    inline System::Void NewDataSet::WindowSetRow::WindowSet_Id::set(System::Int32 value) {
        this[this->tableWindowSet->WindowSet_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WindowSetRow::GUIScheme_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableWindowSet->GUIScheme_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GUIScheme_Id\' in table \'WindowSet\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WindowSetRow::GUIScheme_Id::set(System::Int32 value) {
        this[this->tableWindowSet->GUIScheme_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::WindowSetRow::GUISchemeRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->GetParentRow(this->Table->ParentRelations[L"GUIScheme_WindowSet"])));
    }
    inline System::Void NewDataSet::WindowSetRow::GUISchemeRow::set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"GUIScheme_WindowSet"]);
    }
    
    inline ::System::Boolean NewDataSet::WindowSetRow::IsGUIScheme_IdNull() {
        return this->IsNull(this->tableWindowSet->GUIScheme_IdColumn);
    }
    
    inline ::System::Void NewDataSet::WindowSetRow::SetGUIScheme_IdNull() {
        this[this->tableWindowSet->GUIScheme_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::WindowFactoryRow^  >^  NewDataSet::WindowSetRow::GetWindowFactoryRows() {
        if (this->Table->ChildRelations[L"WindowSet_WindowFactory"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::WindowFactoryRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::WindowFactoryRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WindowSet_WindowFactory"])));
        }
    }
    
    
    inline NewDataSet::WindowFactoryRow::WindowFactoryRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableWindowFactory = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowFactoryDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::WindowFactoryRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableWindowFactory->nameColumn]));
    }
    inline System::Void NewDataSet::WindowFactoryRow::name::set(System::String^  value) {
        this[this->tableWindowFactory->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WindowFactoryRow::WindowSet_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableWindowFactory->WindowSet_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WindowSet_Id\' in table \'WindowFactory\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WindowFactoryRow::WindowSet_Id::set(System::Int32 value) {
        this[this->tableWindowFactory->WindowSet_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowSetRow^  NewDataSet::WindowFactoryRow::WindowSetRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowSetRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WindowSet_WindowFactory"])));
    }
    inline System::Void NewDataSet::WindowFactoryRow::WindowSetRow::set(NinjaPlatformer::NewDataSet::WindowSetRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"WindowSet_WindowFactory"]);
    }
    
    inline ::System::Boolean NewDataSet::WindowFactoryRow::IsWindowSet_IdNull() {
        return this->IsNull(this->tableWindowFactory->WindowSet_IdColumn);
    }
    
    inline ::System::Void NewDataSet::WindowFactoryRow::SetWindowSet_IdNull() {
        this[this->tableWindowFactory->WindowSet_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::WindowRendererSetRow::WindowRendererSetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableWindowRendererSet = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::WindowRendererSetRow::filename::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableWindowRendererSet->filenameColumn]));
    }
    inline System::Void NewDataSet::WindowRendererSetRow::filename::set(System::String^  value) {
        this[this->tableWindowRendererSet->filenameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WindowRendererSetRow::WindowRendererSet_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableWindowRendererSet->WindowRendererSet_IdColumn]));
    }
    inline System::Void NewDataSet::WindowRendererSetRow::WindowRendererSet_Id::set(System::Int32 value) {
        this[this->tableWindowRendererSet->WindowRendererSet_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WindowRendererSetRow::GUIScheme_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableWindowRendererSet->GUIScheme_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GUIScheme_Id\' in table \'WindowRendererSet\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WindowRendererSetRow::GUIScheme_Id::set(System::Int32 value) {
        this[this->tableWindowRendererSet->GUIScheme_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::WindowRendererSetRow::GUISchemeRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->GetParentRow(this->Table->ParentRelations[L"GUIScheme_WindowRendererSet"])));
    }
    inline System::Void NewDataSet::WindowRendererSetRow::GUISchemeRow::set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"GUIScheme_WindowRendererSet"]);
    }
    
    inline ::System::Boolean NewDataSet::WindowRendererSetRow::IsGUIScheme_IdNull() {
        return this->IsNull(this->tableWindowRendererSet->GUIScheme_IdColumn);
    }
    
    inline ::System::Void NewDataSet::WindowRendererSetRow::SetGUIScheme_IdNull() {
        this[this->tableWindowRendererSet->GUIScheme_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >^  NewDataSet::WindowRendererSetRow::GetWindowRendererFactoryRows() {
        if (this->Table->ChildRelations[L"WindowRendererSet_WindowRendererFactory"] == nullptr) {
            return gcnew cli::array< NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WindowRendererSet_WindowRendererFactory"])));
        }
    }
    
    
    inline NewDataSet::WindowRendererFactoryRow::WindowRendererFactoryRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableWindowRendererFactory = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererFactoryDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::WindowRendererFactoryRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableWindowRendererFactory->nameColumn]));
    }
    inline System::Void NewDataSet::WindowRendererFactoryRow::name::set(System::String^  value) {
        this[this->tableWindowRendererFactory->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WindowRendererFactoryRow::WindowRendererSet_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableWindowRendererFactory->WindowRendererSet_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WindowRendererSet_Id\' in table \'WindowRendererFactory\' is D" 
L"BNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WindowRendererFactoryRow::WindowRendererSet_Id::set(System::Int32 value) {
        this[this->tableWindowRendererFactory->WindowRendererSet_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererSetRow^  NewDataSet::WindowRendererFactoryRow::WindowRendererSetRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowRendererSetRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WindowRendererSet_WindowRendererFactory"])));
    }
    inline System::Void NewDataSet::WindowRendererFactoryRow::WindowRendererSetRow::set(NinjaPlatformer::NewDataSet::WindowRendererSetRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"WindowRendererSet_WindowRendererFactory"]);
    }
    
    inline ::System::Boolean NewDataSet::WindowRendererFactoryRow::IsWindowRendererSet_IdNull() {
        return this->IsNull(this->tableWindowRendererFactory->WindowRendererSet_IdColumn);
    }
    
    inline ::System::Void NewDataSet::WindowRendererFactoryRow::SetWindowRendererSet_IdNull() {
        this[this->tableWindowRendererFactory->WindowRendererSet_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::WindowAliasRow::WindowAliasRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableWindowAlias = (cli::safe_cast<NinjaPlatformer::NewDataSet::WindowAliasDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::WindowAliasRow::alias::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableWindowAlias->aliasColumn]));
    }
    inline System::Void NewDataSet::WindowAliasRow::alias::set(System::String^  value) {
        this[this->tableWindowAlias->aliasColumn] = value;
    }
    
    inline System::String^  NewDataSet::WindowAliasRow::target::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableWindowAlias->targetColumn]));
    }
    inline System::Void NewDataSet::WindowAliasRow::target::set(System::String^  value) {
        this[this->tableWindowAlias->targetColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WindowAliasRow::GUIScheme_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableWindowAlias->GUIScheme_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GUIScheme_Id\' in table \'WindowAlias\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WindowAliasRow::GUIScheme_Id::set(System::Int32 value) {
        this[this->tableWindowAlias->GUIScheme_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::WindowAliasRow::GUISchemeRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->GetParentRow(this->Table->ParentRelations[L"GUIScheme_WindowAlias"])));
    }
    inline System::Void NewDataSet::WindowAliasRow::GUISchemeRow::set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"GUIScheme_WindowAlias"]);
    }
    
    inline ::System::Boolean NewDataSet::WindowAliasRow::IsGUIScheme_IdNull() {
        return this->IsNull(this->tableWindowAlias->GUIScheme_IdColumn);
    }
    
    inline ::System::Void NewDataSet::WindowAliasRow::SetGUIScheme_IdNull() {
        this[this->tableWindowAlias->GUIScheme_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::FalagardMappingRow::FalagardMappingRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableFalagardMapping = (cli::safe_cast<NinjaPlatformer::NewDataSet::FalagardMappingDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::FalagardMappingRow::windowType::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableFalagardMapping->windowTypeColumn]));
    }
    inline System::Void NewDataSet::FalagardMappingRow::windowType::set(System::String^  value) {
        this[this->tableFalagardMapping->windowTypeColumn] = value;
    }
    
    inline System::String^  NewDataSet::FalagardMappingRow::targetType::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableFalagardMapping->targetTypeColumn]));
    }
    inline System::Void NewDataSet::FalagardMappingRow::targetType::set(System::String^  value) {
        this[this->tableFalagardMapping->targetTypeColumn] = value;
    }
    
    inline System::String^  NewDataSet::FalagardMappingRow::renderer::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableFalagardMapping->rendererColumn]));
    }
    inline System::Void NewDataSet::FalagardMappingRow::renderer::set(System::String^  value) {
        this[this->tableFalagardMapping->rendererColumn] = value;
    }
    
    inline System::String^  NewDataSet::FalagardMappingRow::lookNFeel::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableFalagardMapping->lookNFeelColumn]));
    }
    inline System::Void NewDataSet::FalagardMappingRow::lookNFeel::set(System::String^  value) {
        this[this->tableFalagardMapping->lookNFeelColumn] = value;
    }
    
    inline System::String^  NewDataSet::FalagardMappingRow::renderEffect::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableFalagardMapping->renderEffectColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'renderEffect\' in table \'FalagardMapping\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::FalagardMappingRow::renderEffect::set(System::String^  value) {
        this[this->tableFalagardMapping->renderEffectColumn] = value;
    }
    
    inline System::Int32 NewDataSet::FalagardMappingRow::GUIScheme_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableFalagardMapping->GUIScheme_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GUIScheme_Id\' in table \'FalagardMapping\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::FalagardMappingRow::GUIScheme_Id::set(System::Int32 value) {
        this[this->tableFalagardMapping->GUIScheme_IdColumn] = value;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::FalagardMappingRow::GUISchemeRow::get() {
        return (cli::safe_cast<NinjaPlatformer::NewDataSet::GUISchemeRow^  >(this->GetParentRow(this->Table->ParentRelations[L"GUIScheme_FalagardMapping"])));
    }
    inline System::Void NewDataSet::FalagardMappingRow::GUISchemeRow::set(NinjaPlatformer::NewDataSet::GUISchemeRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"GUIScheme_FalagardMapping"]);
    }
    
    inline ::System::Boolean NewDataSet::FalagardMappingRow::IsrenderEffectNull() {
        return this->IsNull(this->tableFalagardMapping->renderEffectColumn);
    }
    
    inline ::System::Void NewDataSet::FalagardMappingRow::SetrenderEffectNull() {
        this[this->tableFalagardMapping->renderEffectColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::FalagardMappingRow::IsGUIScheme_IdNull() {
        return this->IsNull(this->tableFalagardMapping->GUIScheme_IdColumn);
    }
    
    inline ::System::Void NewDataSet::FalagardMappingRow::SetGUIScheme_IdNull() {
        this[this->tableFalagardMapping->GUIScheme_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::GUISchemeRowChangeEvent::GUISchemeRowChangeEvent(NinjaPlatformer::NewDataSet::GUISchemeRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::GUISchemeRow^  NewDataSet::GUISchemeRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::GUISchemeRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ImagesetRowChangeEvent::ImagesetRowChangeEvent(NinjaPlatformer::NewDataSet::ImagesetRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetRow^  NewDataSet::ImagesetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ImagesetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ImagesetFromImageRowChangeEvent::ImagesetFromImageRowChangeEvent(NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::ImagesetFromImageRow^  NewDataSet::ImagesetFromImageRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ImagesetFromImageRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::FontRowChangeEvent::FontRowChangeEvent(NinjaPlatformer::NewDataSet::FontRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::FontRow^  NewDataSet::FontRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::FontRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::LookNFeelRowChangeEvent::LookNFeelRowChangeEvent(NinjaPlatformer::NewDataSet::LookNFeelRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::LookNFeelRow^  NewDataSet::LookNFeelRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::LookNFeelRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::WindowSetRowChangeEvent::WindowSetRowChangeEvent(NinjaPlatformer::NewDataSet::WindowSetRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowSetRow^  NewDataSet::WindowSetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::WindowSetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::WindowFactoryRowChangeEvent::WindowFactoryRowChangeEvent(NinjaPlatformer::NewDataSet::WindowFactoryRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowFactoryRow^  NewDataSet::WindowFactoryRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::WindowFactoryRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::WindowRendererSetRowChangeEvent::WindowRendererSetRowChangeEvent(NinjaPlatformer::NewDataSet::WindowRendererSetRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererSetRow^  NewDataSet::WindowRendererSetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::WindowRendererSetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::WindowRendererFactoryRowChangeEvent::WindowRendererFactoryRowChangeEvent(NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowRendererFactoryRow^  NewDataSet::WindowRendererFactoryRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::WindowRendererFactoryRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::WindowAliasRowChangeEvent::WindowAliasRowChangeEvent(NinjaPlatformer::NewDataSet::WindowAliasRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::WindowAliasRow^  NewDataSet::WindowAliasRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::WindowAliasRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::FalagardMappingRowChangeEvent::FalagardMappingRowChangeEvent(NinjaPlatformer::NewDataSet::FalagardMappingRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline NinjaPlatformer::NewDataSet::FalagardMappingRow^  NewDataSet::FalagardMappingRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::FalagardMappingRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
